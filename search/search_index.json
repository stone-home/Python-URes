{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Utility for Research (URes)","text":""},{"location":"#overview","title":"Overview","text":"<p>Welcome to the URes project documentation!</p> <p>URes offers several key features:</p> <ul> <li>Docker Image &amp; Container Management</li> <li>Configuration Management</li> <li>File Operation Utilities</li> <li>Networking Tools</li> <li>Time &amp; Date Conversion</li> <li>String Manipulation</li> <li>Data Structures</li> <li>Markdown &amp; Zettelkasten Tools</li> <li>Decorators &amp; Enum Utilities</li> </ul>"},{"location":"#installation","title":"\ud83d\ude80Installation","text":"<ol> <li>Clone the Repository</li> </ol> <p><code>bash    git clone https://github.com/yourusername/ures.git    cd ures    poetry install</code></p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#modules","title":"Modules","text":"<ul> <li><code>string</code>: String manipulation functions.</li> <li><code>timedate</code>: Time and date manipulation functions.</li> <li><code>network</code>: Network related functions.</li> <li><code>file</code>: File manipulation functions.</li> <li><code>markdown</code>: Markdown manipulation functions.</li> <li><code>bi-direction link</code>: Bi-directional link data structure.</li> <li><code>tree</code>: Tree data structure.</li> <li><code>docker wrapper</code>: Docker wrapper modules</li> </ul>"},{"location":"apis/docker/","title":"Docker Wrapper","text":""},{"location":"apis/docker/#ures.docker.image.Image","title":"<code>Image</code>","text":"<p>Represents a Docker image, providing methods to manage and manipulate images.</p> <p>Attributes:</p> Name Type Description <code>_image_name</code> <code>str</code> <p>The name of the Docker image.</p> <code>_tag</code> <code>str</code> <p>The tag of the Docker image, default is \"latest\".</p> <code>_client</code> <code>DockerClient</code> <p>The Docker client instance.</p> <code>_image</code> <code>Optional[Image]</code> <p>The Docker image object.</p> Source code in <code>ures/docker/image.py</code> <pre><code>class Image:\n    \"\"\"Represents a Docker image, providing methods to manage and manipulate images.\n\n    Attributes:\n        _image_name (str): The name of the Docker image.\n        _tag (str): The tag of the Docker image, default is \"latest\".\n        _client (docker.DockerClient): The Docker client instance.\n        _image (Optional[DockerImage]): The Docker image object.\n    \"\"\"\n\n    def __init__(\n        self,\n        image_name: str,\n        tag: Optional[str] = None,\n        client: docker.DockerClient = None,\n    ):\n        \"\"\"Initializes an Image instance.\n\n        Args:\n            image_name (str): The name of the Docker image.\n            tag (Optional[str], optional): The image tag. Defaults to \"latest\".\n        \"\"\"\n        self._image_name = image_name\n        self._tag = tag or \"latest\"\n        self._client = client or docker.from_env()\n        self._image: Optional[DockerImage] = None\n\n    @property\n    def name(self) -&gt; str:\n        \"\"\"Gets the name of the image.\n\n        Returns:\n            str: The name of the image.\n        \"\"\"\n        return self._image_name\n\n    @property\n    def tag(self) -&gt; str:\n        \"\"\"Gets the tag of the image.\n\n        Returns:\n            str: The tag of the image.\n        \"\"\"\n        return self._tag\n\n    @property\n    def exist(self) -&gt; bool:\n        \"\"\"Checks whether the image exists locally.\n\n        Returns:\n            bool: True if the image exists, False otherwise.\n        \"\"\"\n        return self.get_image() is not None\n\n    @property\n    def image(self) -&gt; Optional[DockerImage]:\n        \"\"\"Gets the Docker image object if it exists.\n\n        Returns:\n            Optional[DockerImage]: The Docker image object or None if not found.\n        \"\"\"\n        return self._image\n\n    @property\n    @check_instance_variable(\"image\")\n    def id(self) -&gt; str:\n        \"\"\"Gets the ID of the image.\n\n        Returns:\n            str: The image ID.\n        \"\"\"\n        return self.image.id\n\n    @property\n    @check_instance_variable(\"image\")\n    def architecture(self) -&gt; str:\n        \"\"\"Gets the architecture of the image.\n\n        Returns:\n            str: The image architecture.\n        \"\"\"\n        return self.image.attrs[\"Architecture\"]\n\n    @property\n    @check_instance_variable(\"image\")\n    def image_size(self) -&gt; int:\n        \"\"\"Gets the size of the image in MB.\n\n        Returns:\n            int: The image size in MB.\n        \"\"\"\n        return int(self.image.attrs[\"Size\"])\n\n    @property\n    @check_instance_variable(\"image\")\n    def labels(self) -&gt; dict:\n        \"\"\"Gets the labels associated with the image.\n\n        Returns:\n            dict: A dictionary containing image labels.\n        \"\"\"\n        return self.image.labels\n\n    def get_fullname(self, tag: Optional[str] = None) -&gt; str:\n        \"\"\"Gets the full name of the image including the tag.\n\n        Args:\n            tag (Optional[str], optional): The image tag. Defaults to the instance's tag.\n\n        Returns:\n            str: The full image name with the tag.\n        \"\"\"\n        if tag is None:\n            tag = self._tag\n        return f\"{self._image_name}:{tag}\"\n\n    def get_image(self, tag: Optional[str] = None) -&gt; Optional[DockerImage]:\n        \"\"\"Retrieves the Docker image from the local repository.\n\n        Args:\n            tag (Optional[str], optional): The tag of the image. Defaults to the instance's tag.\n\n        Returns:\n            Optional[DockerImage]: The Docker image object if found, otherwise None.\n        \"\"\"\n        image_name = self.get_fullname(tag=tag)\n        logger.info(f\"Getting image {image_name}\")\n        try:\n            image = self._client.images.get(image_name)\n            if tag is None or tag == self._tag:\n                self._image = image\n            return image\n        except docker.errors.ImageNotFound:\n            return None\n        except docker.errors.APIError as e:\n            print(f\"Error accessing Docker API: {e}\")\n            return None\n\n    def pull_image(self, tag: Optional[str] = None) -&gt; Optional[DockerImage]:\n        \"\"\"Pulls the Docker image from a remote repository.\n\n        Args:\n            tag (Optional[str], optional): The image tag to pull. Defaults to the instance's tag.\n\n        Returns:\n            Optional[DockerImage]: The pulled Docker image object if successful, otherwise None.\n        \"\"\"\n        tag = tag or self._tag\n        logger.info(f\"Pulling image {self.get_fullname(tag=tag)}\")\n        try:\n            image = self._client.images.pull(self._image_name, tag=tag)\n        except docker.errors.APIError as e:\n            logger.error(f\"Error for pulling image {self.get_fullname(tag=tag)}\")\n        else:\n            self._image = image\n            return image\n\n    def build_image(\n        self,\n        build_context: Union[str, Path],\n        build_config: BuildConfig,\n        dest: Union[str, Path],\n    ) -&gt; DockerImage:\n        \"\"\"Builds a Docker image from a specified build context.\n\n        Args:\n            build_context (Union[str, Path]): The path to the build context.\n            build_config (BuildConfig): The build configuration settings.\n            dest (Union[str, Path]): The destination where the Dockerfile is saved.\n\n        Returns:\n            DockerImage: The built Docker image.\n        \"\"\"\n        build_context = Path(build_context)\n        dest = Path(dest)\n        builder = ImageConstructor(build_config)\n        docker_path = builder.save(dest)\n        image_name = self.get_fullname()\n\n        args = {\n            \"path\": str(build_context),\n            \"tag\": image_name,\n            \"dockerfile\": str(docker_path),\n            \"nocache\": True,\n        }\n\n        logger.info(\n            f\"Building image {image_name} with dockerfile {docker_path} in context {build_context}\"\n        )\n        try:\n            image, build_log = self._client.images.build(**args)\n        except docker.errors.BuildError as e:\n            logger.error(f\"Failed to build image {image_name}\")\n            for log in e.build_log:\n                logger.error(log)\n            raise e\n        else:\n            logger.info(f\"Image {image_name} is built successfully!\")\n            self._image = image\n\n        for line in build_log:\n            logger.debug(line)\n        return image\n\n    def remove(\n        self, tag: Optional[str] = None, force: bool = False, noprune: bool = False\n    ):\n        \"\"\"Removes the specified Docker image.\n\n        Args:\n            tag (Optional[str], optional): The image tag to remove. Defaults to the instance's tag.\n            force (bool, optional): Whether to force remove the image. Defaults to False.\n        \"\"\"\n        image_name = self.get_fullname(tag=tag)\n        args = {\n            \"image\": image_name,\n            \"force\": force,\n            \"noprune\": noprune,\n        }\n        try:\n            self._client.images.remove(**args)\n        except docker.errors.APIError as e:\n            logger.error(f\"Failed to remove image {image_name}. Msg: {e}\")\n        finally:\n            if self.exist is True:\n                logger.error(f\"Removing image {image_name} failed\")\n            else:\n                logger.info(f\"Removing image {image_name} succeeded\")\n\n    def info(self):\n        \"\"\"Prints detailed information about the image.\"\"\"\n        print(\n            f\"\\033[1;33m====================================== Image Info ===============================================\\033[0m\"\n        )\n        print(f\"Name: {self.name}\")\n        print(f\"Image ID: {self.id}\")\n        print(f\"Architecture: {self.architecture}\")\n        print(f\"Image Size: {format_memory(self.image_size)}\")\n        print(f\"Labels: {self.labels}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.architecture","title":"<code>architecture</code>  <code>property</code>","text":"<p>Gets the architecture of the image.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The image architecture.</p>"},{"location":"apis/docker/#ures.docker.image.Image.exist","title":"<code>exist</code>  <code>property</code>","text":"<p>Checks whether the image exists locally.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the image exists, False otherwise.</p>"},{"location":"apis/docker/#ures.docker.image.Image.id","title":"<code>id</code>  <code>property</code>","text":"<p>Gets the ID of the image.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The image ID.</p>"},{"location":"apis/docker/#ures.docker.image.Image.image","title":"<code>image</code>  <code>property</code>","text":"<p>Gets the Docker image object if it exists.</p> <p>Returns:</p> Type Description <code>Optional[Image]</code> <p>Optional[DockerImage]: The Docker image object or None if not found.</p>"},{"location":"apis/docker/#ures.docker.image.Image.image_size","title":"<code>image_size</code>  <code>property</code>","text":"<p>Gets the size of the image in MB.</p> <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The image size in MB.</p>"},{"location":"apis/docker/#ures.docker.image.Image.labels","title":"<code>labels</code>  <code>property</code>","text":"<p>Gets the labels associated with the image.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A dictionary containing image labels.</p>"},{"location":"apis/docker/#ures.docker.image.Image.name","title":"<code>name</code>  <code>property</code>","text":"<p>Gets the name of the image.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The name of the image.</p>"},{"location":"apis/docker/#ures.docker.image.Image.tag","title":"<code>tag</code>  <code>property</code>","text":"<p>Gets the tag of the image.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The tag of the image.</p>"},{"location":"apis/docker/#ures.docker.image.Image.__init__","title":"<code>__init__(image_name, tag=None, client=None)</code>","text":"<p>Initializes an Image instance.</p> <p>Parameters:</p> Name Type Description Default <code>image_name</code> <code>str</code> <p>The name of the Docker image.</p> required <code>tag</code> <code>Optional[str]</code> <p>The image tag. Defaults to \"latest\".</p> <code>None</code> Source code in <code>ures/docker/image.py</code> <pre><code>def __init__(\n    self,\n    image_name: str,\n    tag: Optional[str] = None,\n    client: docker.DockerClient = None,\n):\n    \"\"\"Initializes an Image instance.\n\n    Args:\n        image_name (str): The name of the Docker image.\n        tag (Optional[str], optional): The image tag. Defaults to \"latest\".\n    \"\"\"\n    self._image_name = image_name\n    self._tag = tag or \"latest\"\n    self._client = client or docker.from_env()\n    self._image: Optional[DockerImage] = None\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.build_image","title":"<code>build_image(build_context, build_config, dest)</code>","text":"<p>Builds a Docker image from a specified build context.</p> <p>Parameters:</p> Name Type Description Default <code>build_context</code> <code>Union[str, Path]</code> <p>The path to the build context.</p> required <code>build_config</code> <code>BuildConfig</code> <p>The build configuration settings.</p> required <code>dest</code> <code>Union[str, Path]</code> <p>The destination where the Dockerfile is saved.</p> required <p>Returns:</p> Name Type Description <code>DockerImage</code> <code>Image</code> <p>The built Docker image.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def build_image(\n    self,\n    build_context: Union[str, Path],\n    build_config: BuildConfig,\n    dest: Union[str, Path],\n) -&gt; DockerImage:\n    \"\"\"Builds a Docker image from a specified build context.\n\n    Args:\n        build_context (Union[str, Path]): The path to the build context.\n        build_config (BuildConfig): The build configuration settings.\n        dest (Union[str, Path]): The destination where the Dockerfile is saved.\n\n    Returns:\n        DockerImage: The built Docker image.\n    \"\"\"\n    build_context = Path(build_context)\n    dest = Path(dest)\n    builder = ImageConstructor(build_config)\n    docker_path = builder.save(dest)\n    image_name = self.get_fullname()\n\n    args = {\n        \"path\": str(build_context),\n        \"tag\": image_name,\n        \"dockerfile\": str(docker_path),\n        \"nocache\": True,\n    }\n\n    logger.info(\n        f\"Building image {image_name} with dockerfile {docker_path} in context {build_context}\"\n    )\n    try:\n        image, build_log = self._client.images.build(**args)\n    except docker.errors.BuildError as e:\n        logger.error(f\"Failed to build image {image_name}\")\n        for log in e.build_log:\n            logger.error(log)\n        raise e\n    else:\n        logger.info(f\"Image {image_name} is built successfully!\")\n        self._image = image\n\n    for line in build_log:\n        logger.debug(line)\n    return image\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.get_fullname","title":"<code>get_fullname(tag=None)</code>","text":"<p>Gets the full name of the image including the tag.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Optional[str]</code> <p>The image tag. Defaults to the instance's tag.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The full image name with the tag.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def get_fullname(self, tag: Optional[str] = None) -&gt; str:\n    \"\"\"Gets the full name of the image including the tag.\n\n    Args:\n        tag (Optional[str], optional): The image tag. Defaults to the instance's tag.\n\n    Returns:\n        str: The full image name with the tag.\n    \"\"\"\n    if tag is None:\n        tag = self._tag\n    return f\"{self._image_name}:{tag}\"\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.get_image","title":"<code>get_image(tag=None)</code>","text":"<p>Retrieves the Docker image from the local repository.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Optional[str]</code> <p>The tag of the image. Defaults to the instance's tag.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Image]</code> <p>Optional[DockerImage]: The Docker image object if found, otherwise None.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def get_image(self, tag: Optional[str] = None) -&gt; Optional[DockerImage]:\n    \"\"\"Retrieves the Docker image from the local repository.\n\n    Args:\n        tag (Optional[str], optional): The tag of the image. Defaults to the instance's tag.\n\n    Returns:\n        Optional[DockerImage]: The Docker image object if found, otherwise None.\n    \"\"\"\n    image_name = self.get_fullname(tag=tag)\n    logger.info(f\"Getting image {image_name}\")\n    try:\n        image = self._client.images.get(image_name)\n        if tag is None or tag == self._tag:\n            self._image = image\n        return image\n    except docker.errors.ImageNotFound:\n        return None\n    except docker.errors.APIError as e:\n        print(f\"Error accessing Docker API: {e}\")\n        return None\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.info","title":"<code>info()</code>","text":"<p>Prints detailed information about the image.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def info(self):\n    \"\"\"Prints detailed information about the image.\"\"\"\n    print(\n        f\"\\033[1;33m====================================== Image Info ===============================================\\033[0m\"\n    )\n    print(f\"Name: {self.name}\")\n    print(f\"Image ID: {self.id}\")\n    print(f\"Architecture: {self.architecture}\")\n    print(f\"Image Size: {format_memory(self.image_size)}\")\n    print(f\"Labels: {self.labels}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.pull_image","title":"<code>pull_image(tag=None)</code>","text":"<p>Pulls the Docker image from a remote repository.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Optional[str]</code> <p>The image tag to pull. Defaults to the instance's tag.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[Image]</code> <p>Optional[DockerImage]: The pulled Docker image object if successful, otherwise None.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def pull_image(self, tag: Optional[str] = None) -&gt; Optional[DockerImage]:\n    \"\"\"Pulls the Docker image from a remote repository.\n\n    Args:\n        tag (Optional[str], optional): The image tag to pull. Defaults to the instance's tag.\n\n    Returns:\n        Optional[DockerImage]: The pulled Docker image object if successful, otherwise None.\n    \"\"\"\n    tag = tag or self._tag\n    logger.info(f\"Pulling image {self.get_fullname(tag=tag)}\")\n    try:\n        image = self._client.images.pull(self._image_name, tag=tag)\n    except docker.errors.APIError as e:\n        logger.error(f\"Error for pulling image {self.get_fullname(tag=tag)}\")\n    else:\n        self._image = image\n        return image\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.Image.remove","title":"<code>remove(tag=None, force=False, noprune=False)</code>","text":"<p>Removes the specified Docker image.</p> <p>Parameters:</p> Name Type Description Default <code>tag</code> <code>Optional[str]</code> <p>The image tag to remove. Defaults to the instance's tag.</p> <code>None</code> <code>force</code> <code>bool</code> <p>Whether to force remove the image. Defaults to False.</p> <code>False</code> Source code in <code>ures/docker/image.py</code> <pre><code>def remove(\n    self, tag: Optional[str] = None, force: bool = False, noprune: bool = False\n):\n    \"\"\"Removes the specified Docker image.\n\n    Args:\n        tag (Optional[str], optional): The image tag to remove. Defaults to the instance's tag.\n        force (bool, optional): Whether to force remove the image. Defaults to False.\n    \"\"\"\n    image_name = self.get_fullname(tag=tag)\n    args = {\n        \"image\": image_name,\n        \"force\": force,\n        \"noprune\": noprune,\n    }\n    try:\n        self._client.images.remove(**args)\n    except docker.errors.APIError as e:\n        logger.error(f\"Failed to remove image {image_name}. Msg: {e}\")\n    finally:\n        if self.exist is True:\n            logger.error(f\"Removing image {image_name} failed\")\n        else:\n            logger.info(f\"Removing image {image_name} succeeded\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor","title":"<code>ImageConstructor</code>","text":"Source code in <code>ures/docker/image.py</code> <pre><code>class ImageConstructor:\n    def __init__(self, config: BuildConfig):\n        self._config = config\n        self._dockerfile_content = []\n        self._build_dockerfile()\n\n    @property\n    def home_dir(self) -&gt; Path:\n        \"\"\"Returns the home directory path based on the configured user.\"\"\"\n        home_dir = (\n            f\"/home/{self._config.user}\" if self._config.user else \"/root\"\n        )  # Default to /root if no user\n        return Path(home_dir)\n\n    @property\n    def content(self) -&gt; List[str]:\n        return self._dockerfile_content\n\n    def _add_command(self, command: str):\n        \"\"\"Appends a command to the Dockerfile content.\"\"\"\n        logger.debug(f\"Adding command: {command}\")\n        self._dockerfile_content.append(command)\n\n    def save(self, dest: Union[str, Path]) -&gt; Path:\n        \"\"\"Saves the generated Dockerfile to the specified destination.\n\n        If the destination is a directory, the Dockerfile will be named \"Dockerfile\"\n        and placed inside that directory. Creates parent directories if needed.\n        \"\"\"\n        dest_path = Path(dest) if isinstance(dest, str) else dest\n        if dest_path.is_dir():\n            dest_path = dest_path / self._config.docker_filename\n\n        logger.info(f\"Saving Dockerfile to: {dest_path}\")\n        dest_path.parent.mkdir(parents=True, exist_ok=True)\n\n        with open(dest_path, \"w\") as f:\n            f.write(\"\\n\".join(self._dockerfile_content))\n        return dest_path\n\n    def _set_base_image(self):\n        \"\"\"Sets the base image in the Dockerfile, including platform if specified.\"\"\"\n        base_image = self._config.base_image\n        if self._config.platform:\n            base_image = f\"--platform={self._config.platform} {base_image}\"\n        self._add_command(f\"FROM {base_image}\")\n\n    def _set_labels(self):\n        \"\"\"Sets labels in the Dockerfile.\"\"\"\n        if self._config.labels:\n            for key, value in self._config.labels:\n                self._add_command(f'LABEL \"{key}\"=\"{value}\"')\n\n    def _set_user_and_workdir(self):\n        \"\"\"Sets the user and working directory in the Dockerfile.\"\"\"\n        user = self._config.user\n        uid = self._config.uid\n\n        if user:\n            self._add_command(f\"ARG HOME_DIR={self.home_dir}\")  # Define HOME_DIR early\n            self._add_command(f\"ARG USER_NAME={user}\")\n\n            if uid:\n                self._add_command(f\"ARG UID={uid}\")\n                self._add_command(\n                    f\"RUN useradd -m -u $UID -s /bin/bash -d $HOME_DIR $USER_NAME\"\n                )\n                self._add_command(f\"RUN chown -R $USER_NAME:$USER_NAME $HOME_DIR\")\n\n            self._add_command(f\"USER $USER_NAME\")\n            self._add_command(f\"WORKDIR $HOME_DIR\")  # Set workdir *after* setting user\n\n    def _set_system_dependencies(self):\n        \"\"\"Installs system dependencies.\"\"\"\n        sys_deps = self._config.sys_dependencies\n        manager = self._config.sys_deps_manager\n\n        if sys_deps:\n            deps_string = \" \".join(sys_deps)\n            command = f\"RUN {manager} update &amp;&amp; {manager} install -y {deps_string}\"\n            if manager == \"apt\":  # Add cleanup for apt\n                command += \" &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*\"\n            self._add_command(command)\n\n    def _set_python_dependencies(self):\n        \"\"\"Installs Python dependencies.\"\"\"\n        python_deps = self._config.python_dependencies\n        manager = self._config.python_deps_manager\n\n        if python_deps:\n            deps_string = \" \".join(python_deps)\n            if manager == \"pip\":\n                command = (\n                    f\"RUN pip install --upgrade pip &amp;&amp; pip install --no-cache-dir {deps_string} \"\n                    f\" &amp;&amp; rm -rf /tmp/* /var/tmp/*\"\n                )\n                self._add_command(command)\n            elif manager == \"conda\":  # Add conda support if needed\n                # todo\n                pass\n            else:\n                logger.warning(f\"Unsupported python package manager: {manager}\")\n\n    def _set_copies(self):\n        \"\"\"Copies files into the image.\"\"\"\n        if self._config.copies:\n            for copy_spec in self._config.copies:\n                src = Path(copy_spec[\"src\"])\n                dest = Path(copy_spec[\"dest\"])\n\n                # Handle relative destination paths\n                if dest.is_absolute() is False:\n                    dest = self.home_dir.joinpath(dest)\n\n                self._add_command(f\"COPY --chown=$USER_NAME {src} {dest}\")\n\n    def _set_environment(self):\n        \"\"\"Sets environment variables.\"\"\"\n        if self._config.environment:\n            for key, value in self._config.environment.items():\n                self._add_command(f\"ENV {key}={value}\")\n\n    def _set_entrypoint(self):\n        \"\"\"Sets the entrypoint.\"\"\"\n        if self._config.entrypoint:\n            self._add_command(f\"ENTRYPOINT {json.dumps(self._config.entrypoint)}\")\n\n    def _set_cmd(self):\n        \"\"\"Sets the command (only if entrypoint is not set).\"\"\"\n        if self._config.cmd and not self._config.entrypoint:\n            self._add_command(f\"CMD {json.dumps(self._config.cmd)}\")\n\n    def _build_dockerfile(self):\n        \"\"\"Generates the Dockerfile content.\"\"\"\n        self._set_base_image()\n        self._set_labels()\n        self._set_user_and_workdir()  # combined user and workdir\n        self._set_system_dependencies()\n        self._set_python_dependencies()\n        self._set_copies()\n        self._set_environment()\n        self._set_entrypoint()\n        self._set_cmd()\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor.home_dir","title":"<code>home_dir</code>  <code>property</code>","text":"<p>Returns the home directory path based on the configured user.</p>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._add_command","title":"<code>_add_command(command)</code>","text":"<p>Appends a command to the Dockerfile content.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _add_command(self, command: str):\n    \"\"\"Appends a command to the Dockerfile content.\"\"\"\n    logger.debug(f\"Adding command: {command}\")\n    self._dockerfile_content.append(command)\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._build_dockerfile","title":"<code>_build_dockerfile()</code>","text":"<p>Generates the Dockerfile content.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _build_dockerfile(self):\n    \"\"\"Generates the Dockerfile content.\"\"\"\n    self._set_base_image()\n    self._set_labels()\n    self._set_user_and_workdir()  # combined user and workdir\n    self._set_system_dependencies()\n    self._set_python_dependencies()\n    self._set_copies()\n    self._set_environment()\n    self._set_entrypoint()\n    self._set_cmd()\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_base_image","title":"<code>_set_base_image()</code>","text":"<p>Sets the base image in the Dockerfile, including platform if specified.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_base_image(self):\n    \"\"\"Sets the base image in the Dockerfile, including platform if specified.\"\"\"\n    base_image = self._config.base_image\n    if self._config.platform:\n        base_image = f\"--platform={self._config.platform} {base_image}\"\n    self._add_command(f\"FROM {base_image}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_cmd","title":"<code>_set_cmd()</code>","text":"<p>Sets the command (only if entrypoint is not set).</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_cmd(self):\n    \"\"\"Sets the command (only if entrypoint is not set).\"\"\"\n    if self._config.cmd and not self._config.entrypoint:\n        self._add_command(f\"CMD {json.dumps(self._config.cmd)}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_copies","title":"<code>_set_copies()</code>","text":"<p>Copies files into the image.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_copies(self):\n    \"\"\"Copies files into the image.\"\"\"\n    if self._config.copies:\n        for copy_spec in self._config.copies:\n            src = Path(copy_spec[\"src\"])\n            dest = Path(copy_spec[\"dest\"])\n\n            # Handle relative destination paths\n            if dest.is_absolute() is False:\n                dest = self.home_dir.joinpath(dest)\n\n            self._add_command(f\"COPY --chown=$USER_NAME {src} {dest}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_entrypoint","title":"<code>_set_entrypoint()</code>","text":"<p>Sets the entrypoint.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_entrypoint(self):\n    \"\"\"Sets the entrypoint.\"\"\"\n    if self._config.entrypoint:\n        self._add_command(f\"ENTRYPOINT {json.dumps(self._config.entrypoint)}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_environment","title":"<code>_set_environment()</code>","text":"<p>Sets environment variables.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_environment(self):\n    \"\"\"Sets environment variables.\"\"\"\n    if self._config.environment:\n        for key, value in self._config.environment.items():\n            self._add_command(f\"ENV {key}={value}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_labels","title":"<code>_set_labels()</code>","text":"<p>Sets labels in the Dockerfile.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_labels(self):\n    \"\"\"Sets labels in the Dockerfile.\"\"\"\n    if self._config.labels:\n        for key, value in self._config.labels:\n            self._add_command(f'LABEL \"{key}\"=\"{value}\"')\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_python_dependencies","title":"<code>_set_python_dependencies()</code>","text":"<p>Installs Python dependencies.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_python_dependencies(self):\n    \"\"\"Installs Python dependencies.\"\"\"\n    python_deps = self._config.python_dependencies\n    manager = self._config.python_deps_manager\n\n    if python_deps:\n        deps_string = \" \".join(python_deps)\n        if manager == \"pip\":\n            command = (\n                f\"RUN pip install --upgrade pip &amp;&amp; pip install --no-cache-dir {deps_string} \"\n                f\" &amp;&amp; rm -rf /tmp/* /var/tmp/*\"\n            )\n            self._add_command(command)\n        elif manager == \"conda\":  # Add conda support if needed\n            # todo\n            pass\n        else:\n            logger.warning(f\"Unsupported python package manager: {manager}\")\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_system_dependencies","title":"<code>_set_system_dependencies()</code>","text":"<p>Installs system dependencies.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_system_dependencies(self):\n    \"\"\"Installs system dependencies.\"\"\"\n    sys_deps = self._config.sys_dependencies\n    manager = self._config.sys_deps_manager\n\n    if sys_deps:\n        deps_string = \" \".join(sys_deps)\n        command = f\"RUN {manager} update &amp;&amp; {manager} install -y {deps_string}\"\n        if manager == \"apt\":  # Add cleanup for apt\n            command += \" &amp;&amp; apt-get clean &amp;&amp; rm -rf /var/lib/apt/lists/*\"\n        self._add_command(command)\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor._set_user_and_workdir","title":"<code>_set_user_and_workdir()</code>","text":"<p>Sets the user and working directory in the Dockerfile.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def _set_user_and_workdir(self):\n    \"\"\"Sets the user and working directory in the Dockerfile.\"\"\"\n    user = self._config.user\n    uid = self._config.uid\n\n    if user:\n        self._add_command(f\"ARG HOME_DIR={self.home_dir}\")  # Define HOME_DIR early\n        self._add_command(f\"ARG USER_NAME={user}\")\n\n        if uid:\n            self._add_command(f\"ARG UID={uid}\")\n            self._add_command(\n                f\"RUN useradd -m -u $UID -s /bin/bash -d $HOME_DIR $USER_NAME\"\n            )\n            self._add_command(f\"RUN chown -R $USER_NAME:$USER_NAME $HOME_DIR\")\n\n        self._add_command(f\"USER $USER_NAME\")\n        self._add_command(f\"WORKDIR $HOME_DIR\")  # Set workdir *after* setting user\n</code></pre>"},{"location":"apis/docker/#ures.docker.image.ImageConstructor.save","title":"<code>save(dest)</code>","text":"<p>Saves the generated Dockerfile to the specified destination.</p> <p>If the destination is a directory, the Dockerfile will be named \"Dockerfile\" and placed inside that directory. Creates parent directories if needed.</p> Source code in <code>ures/docker/image.py</code> <pre><code>def save(self, dest: Union[str, Path]) -&gt; Path:\n    \"\"\"Saves the generated Dockerfile to the specified destination.\n\n    If the destination is a directory, the Dockerfile will be named \"Dockerfile\"\n    and placed inside that directory. Creates parent directories if needed.\n    \"\"\"\n    dest_path = Path(dest) if isinstance(dest, str) else dest\n    if dest_path.is_dir():\n        dest_path = dest_path / self._config.docker_filename\n\n    logger.info(f\"Saving Dockerfile to: {dest_path}\")\n    dest_path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(dest_path, \"w\") as f:\n        f.write(\"\\n\".join(self._dockerfile_content))\n    return dest_path\n</code></pre>"},{"location":"apis/docker/#ures.docker.conf.BuildConfig","title":"<code>BuildConfig</code>","text":"<p>               Bases: <code>BaseModel</code></p> Source code in <code>ures/docker/conf.py</code> <pre><code>class BuildConfig(BaseModel):\n    base_image: str = Field(\n        default=\"python:3.10-slim\",\n        title=\"Base Image\",\n        description=\"Base image for the container\",\n    )\n    platform: Optional[str] = Field(\n        default=None,\n        title=\"Platform\",\n        description=\"Platform for the base image in format os[/arch[/variant]]\",\n    )\n    python_deps_manager: Optional[str] = Field(\n        default=\"pip\",\n        title=\"Python Dependencies Manager, such as pip or conda\",\n        description=\"To define which package manager to use for python dependencies\",\n    )\n    python_dependencies: Optional[List[str]] = Field(\n        default=None,\n        title=\"Python Dependencies\",\n        description=\"Python dependencies to be installed\",\n    )\n    sys_deps_manager: Optional[str] = Field(\n        default=\"apt\",\n        title=\"System Dependencies Manager, such as apt, yum, or apk\",\n        description=\"To define which package manager to use for system dependencies\",\n    )\n    sys_dependencies: Optional[List[str]] = Field(\n        default=None,\n        title=\"System Dependencies\",\n        description=\"System dependencies to be installed\",\n    )\n    labels: Optional[List[Tuple[str, str]]] = Field(\n        default=None, title=\"Labels\", description=\"Labels for the image\"\n    )\n    uid: Optional[int] = Field(\n        default=None, title=\"User ID\", description=\"User ID for the container\"\n    )\n    user: Optional[str] = Field(\n        default=None, title=\"User\", description=\"User for the container\"\n    )\n    entrypoint: Optional[List[str]] = Field(\n        default=None, title=\"Entrypoint\", description=\"Entrypoint for the container\"\n    )\n    cmd: Optional[List[str]] = Field(\n        default=None, title=\"Command\", description=\"Command for the container\"\n    )\n    # The data structure for environment is a dictionary with the keys being the environment variable names\n    environment: Optional[Dict[str, str]] = Field(\n        default=None,\n        title=\"Environment\",\n        description=\"Environment variables for the container\",\n    )\n    # The data structure for copies is a list of dictionaries with the keys \"src\", \"dest\", and \"mode\"\n    copies: Optional[List[Dict[str, str]]] = Field(\n        default=None, title=\"Copies\", description=\"Files to be copied to the container\"\n    )\n    context_dir: Union[str, Path] = Field(\n        default=Path().cwd(),\n        title=\"Context Directory\",\n        description=\"Directory for the build context\",\n    )\n    docker_filename: str = Field(\n        default=\"Dockerfile\",\n        title=\"Dockerfile\",\n        description=\"Name of the Dockerfile\",\n    )\n\n    def add_label(self, key: str, value: str):\n        logger.info(f\"Adding label {key} with value {value}\")\n        if self.labels is None:\n            self.labels = []\n        self.labels.append((key, value))\n\n    def add_copy(self, src: str, dest: str):\n        logger.info(f\"Adding copy {src} to {dest}\")\n        if self.copies is None:\n            self.copies = []\n        self.copies.append({\"src\": src, \"dest\": dest})\n\n    def add_environment(self, key: str, value: str):\n        logger.info(f\"Adding environment variable {key} with value {value}\")\n        if self.environment is None:\n            self.environment = {}\n        self.environment[key] = value\n\n    def set_context_dir(self, context_dir: Union[str, Path]):\n        logger.info(f\"Setting context directory to {context_dir}\")\n        if isinstance(context_dir, str):\n            context_dir = Path(context_dir)\n        if not context_dir.is_dir():\n            raise ValueError(f\"Context directory {context_dir} is not a directory\")\n        self.context_dir = context_dir\n\n    def add_python_dependency(self, dependency: str):\n        \"\"\"Adds a Python dependency.\"\"\"\n        logger.info(f\"Adding Python dependency: '{dependency}'\")\n        if self.python_dependencies is None:\n            self.python_dependencies = []\n        self.python_dependencies.append(dependency)\n\n    def add_system_dependency(self, dependency: str):\n        \"\"\"Adds a system dependency.\"\"\"\n        logger.info(f\"Adding system dependency: '{dependency}'\")\n        if self.sys_dependencies is None:\n            self.sys_dependencies = []\n        self.sys_dependencies.append(dependency)\n\n    def set_entrypoint(self, entrypoint: Union[str, List[str]]):\n        \"\"\"Sets the entrypoint for the container.\"\"\"\n        if isinstance(entrypoint, str):\n            entrypoint = [entrypoint]\n        logger.info(f\"Setting entrypoint to: '{entrypoint}'\")\n        self.entrypoint = entrypoint\n\n    def set_cmd(self, cmd: Union[str, List[str]]):\n        \"\"\"Sets the command for the container.\"\"\"\n        if isinstance(cmd, str):\n            cmd = [cmd]\n        logger.info(f\"Setting command to: '{cmd}'\")\n        self.cmd = cmd\n</code></pre>"},{"location":"apis/docker/#ures.docker.conf.BuildConfig.add_python_dependency","title":"<code>add_python_dependency(dependency)</code>","text":"<p>Adds a Python dependency.</p> Source code in <code>ures/docker/conf.py</code> <pre><code>def add_python_dependency(self, dependency: str):\n    \"\"\"Adds a Python dependency.\"\"\"\n    logger.info(f\"Adding Python dependency: '{dependency}'\")\n    if self.python_dependencies is None:\n        self.python_dependencies = []\n    self.python_dependencies.append(dependency)\n</code></pre>"},{"location":"apis/docker/#ures.docker.conf.BuildConfig.add_system_dependency","title":"<code>add_system_dependency(dependency)</code>","text":"<p>Adds a system dependency.</p> Source code in <code>ures/docker/conf.py</code> <pre><code>def add_system_dependency(self, dependency: str):\n    \"\"\"Adds a system dependency.\"\"\"\n    logger.info(f\"Adding system dependency: '{dependency}'\")\n    if self.sys_dependencies is None:\n        self.sys_dependencies = []\n    self.sys_dependencies.append(dependency)\n</code></pre>"},{"location":"apis/docker/#ures.docker.conf.BuildConfig.set_cmd","title":"<code>set_cmd(cmd)</code>","text":"<p>Sets the command for the container.</p> Source code in <code>ures/docker/conf.py</code> <pre><code>def set_cmd(self, cmd: Union[str, List[str]]):\n    \"\"\"Sets the command for the container.\"\"\"\n    if isinstance(cmd, str):\n        cmd = [cmd]\n    logger.info(f\"Setting command to: '{cmd}'\")\n    self.cmd = cmd\n</code></pre>"},{"location":"apis/docker/#ures.docker.conf.BuildConfig.set_entrypoint","title":"<code>set_entrypoint(entrypoint)</code>","text":"<p>Sets the entrypoint for the container.</p> Source code in <code>ures/docker/conf.py</code> <pre><code>def set_entrypoint(self, entrypoint: Union[str, List[str]]):\n    \"\"\"Sets the entrypoint for the container.\"\"\"\n    if isinstance(entrypoint, str):\n        entrypoint = [entrypoint]\n    logger.info(f\"Setting entrypoint to: '{entrypoint}'\")\n    self.entrypoint = entrypoint\n</code></pre>"},{"location":"apis/files/","title":"Files Module","text":""},{"location":"apis/files/#ures.files.filter_files","title":"<code>filter_files(part_file_name, directory, fuzz=True)</code>","text":"<p>Retrieve file paths in the specified directory that match a given file name pattern.</p> <p>This function filters file paths within a directory by checking if the file name contains the provided keyword. When 'fuzz' is True, it returns all files that contain the keyword; otherwise, it returns only the files whose name exactly matches the keyword.</p> <p>Parameters:</p> Name Type Description Default <code>part_file_name</code> <code>str</code> <p>The substring or keyword to search for in file names.</p> required <code>directory</code> <code>str</code> <p>The directory path to search in.</p> required <code>fuzz</code> <code>bool</code> <p>If True, returns all files containing the keyword. If False, returns only files with an exact name match. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list of file paths that match the search criteria.</p> Example Source code in <code>ures/files.py</code> <pre><code>def filter_files(part_file_name: str, directory: str, fuzz: bool = True) -&gt; List[str]:\n    \"\"\"\n    Retrieve file paths in the specified directory that match a given file name pattern.\n\n    This function filters file paths within a directory by checking if the file name contains\n    the provided keyword. When 'fuzz' is True, it returns all files that contain the keyword;\n    otherwise, it returns only the files whose name exactly matches the keyword.\n\n    Args:\n        part_file_name (str): The substring or keyword to search for in file names.\n        directory (str): The directory path to search in.\n        fuzz (bool, optional): If True, returns all files containing the keyword. If False,\n            returns only files with an exact name match. Defaults to True.\n\n    Returns:\n        List[str]: A list of file paths that match the search criteria.\n\n    Example:\n        &gt;&gt;&gt; # Assuming \"/tmp/test\" contains files \"example.txt\" and \"sample.txt\"\n        &gt;&gt;&gt; filter_files(\"exam\", \"/tmp/test\", fuzz=True)\n        ['/tmp/test/example.txt']\n    \"\"\"\n    # Note: Using get_file_paths instead of a non-existent fetch_file_paths.\n    file_paths = get_file_paths(directory)\n    if fuzz:\n        return [\n            str(file_path)\n            for file_path in file_paths\n            if part_file_name in os.path.basename(str(file_path))\n        ]\n    else:\n        return [\n            str(file_path)\n            for file_path in file_paths\n            if part_file_name == os.path.basename(str(file_path))\n        ]\n</code></pre>"},{"location":"apis/files/#ures.files.filter_files--assuming-tmptest-contains-files-exampletxt-and-sampletxt","title":"Assuming \"/tmp/test\" contains files \"example.txt\" and \"sample.txt\"","text":"<p>filter_files(\"exam\", \"/tmp/test\", fuzz=True) ['/tmp/test/example.txt']</p>"},{"location":"apis/files/#ures.files.get_file_paths","title":"<code>get_file_paths(directory)</code>","text":"<p>Retrieve all file paths within the specified directory and its subdirectories.</p> <p>This function walks through the given directory recursively and returns a list of absolute file paths for every file found.</p> <p>Parameters:</p> Name Type Description Default <code>directory</code> <code>str</code> <p>The directory path to search in.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List[str]: A list containing the absolute paths of all files found.</p> Example <p>paths = get_file_paths(\"/path/to/directory\") isinstance(paths, list) True</p> Source code in <code>ures/files.py</code> <pre><code>def get_file_paths(directory: str) -&gt; List[str]:\n    \"\"\"\n    Retrieve all file paths within the specified directory and its subdirectories.\n\n    This function walks through the given directory recursively and returns a list of\n    absolute file paths for every file found.\n\n    Args:\n        directory (str): The directory path to search in.\n\n    Returns:\n        List[str]: A list containing the absolute paths of all files found.\n\n    Example:\n        &gt;&gt;&gt; paths = get_file_paths(\"/path/to/directory\")\n        &gt;&gt;&gt; isinstance(paths, list)\n        True\n    \"\"\"\n    file_paths = []\n    # Walk through the directory and its subdirectories.\n    for root, _, files in os.walk(directory):\n        for file in files:\n            # Join the root path with the file name to get the absolute path.\n            file_path = os.path.join(root, file)\n            file_paths.append(str(file_path))\n    return file_paths\n</code></pre>"},{"location":"apis/files/#ures.files.get_temp_dir_with_specific_path","title":"<code>get_temp_dir_with_specific_path(*args)</code>","text":"<p>Create (if necessary) and return a temporary directory with a specified subpath.</p> <p>This function constructs a path within the system's temporary directory using the provided arguments. If the directory does not already exist, it is created.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length arguments that specify the subdirectory path components.</p> <code>()</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The full path of the temporary directory created or existing.</p> Example <p>temp_dir = get_temp_dir_with_specific_path(\"myapp\", \"cache\") temp_dir.endswith(os.path.join(\"myapp\", \"cache\")) True</p> Source code in <code>ures/files.py</code> <pre><code>def get_temp_dir_with_specific_path(*args) -&gt; str:\n    \"\"\"\n    Create (if necessary) and return a temporary directory with a specified subpath.\n\n    This function constructs a path within the system's temporary directory using the provided\n    arguments. If the directory does not already exist, it is created.\n\n    Args:\n        *args: Variable length arguments that specify the subdirectory path components.\n\n    Returns:\n        str: The full path of the temporary directory created or existing.\n\n    Example:\n        &gt;&gt;&gt; temp_dir = get_temp_dir_with_specific_path(\"myapp\", \"cache\")\n        &gt;&gt;&gt; temp_dir.endswith(os.path.join(\"myapp\", \"cache\"))\n        True\n    \"\"\"\n    temp_dir = tempfile.gettempdir()\n    flame_temp = os.path.join(temp_dir, *args)\n    if not os.path.isdir(flame_temp):\n        os.makedirs(flame_temp, exist_ok=True)\n    return flame_temp\n</code></pre>"},{"location":"apis/files/#ures.files.get_temp_folder","title":"<code>get_temp_folder()</code>","text":"<p>Obtain the path of a new temporary folder.</p> <p>This function creates a temporary directory using Python's tempfile module and returns its path.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The path to the newly created temporary folder.</p> Example <p>temp_folder = get_temp_folder() os.path.isdir(temp_folder) True</p> Source code in <code>ures/files.py</code> <pre><code>def get_temp_folder() -&gt; str:\n    \"\"\"\n    Obtain the path of a new temporary folder.\n\n    This function creates a temporary directory using Python's tempfile module and returns\n    its path.\n\n    Returns:\n        str: The path to the newly created temporary folder.\n\n    Example:\n        &gt;&gt;&gt; temp_folder = get_temp_folder()\n        &gt;&gt;&gt; os.path.isdir(temp_folder)\n        True\n    \"\"\"\n    return tempfile.TemporaryDirectory().name\n</code></pre>"},{"location":"apis/files/#ures.files.list_directories","title":"<code>list_directories(path)</code>","text":"<p>List all subdirectories in the specified path.</p> <p>This function checks whether the given path exists and then returns a list of names for each entry in the path that is a directory.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path where directories should be listed.</p> required <p>Returns:</p> Type Description <code>Optional[List[str]]</code> <p>Optional[List[str]]: A list of directory names if the path exists; otherwise, None.</p> Example <p>dirs = list_directories(\"/tmp\") isinstance(dirs, list) or dirs is None True</p> Source code in <code>ures/files.py</code> <pre><code>def list_directories(path: str) -&gt; Optional[List[str]]:\n    \"\"\"\n    List all subdirectories in the specified path.\n\n    This function checks whether the given path exists and then returns a list of names for\n    each entry in the path that is a directory.\n\n    Args:\n        path (str): The path where directories should be listed.\n\n    Returns:\n        Optional[List[str]]: A list of directory names if the path exists; otherwise, None.\n\n    Example:\n        &gt;&gt;&gt; dirs = list_directories(\"/tmp\")\n        &gt;&gt;&gt; isinstance(dirs, list) or dirs is None\n        True\n    \"\"\"\n    # Ensure the path exists.\n    if not os.path.exists(path):\n        print(\"The specified path does not exist.\")\n        return None\n\n    # List all entries in the path.\n    entries = os.listdir(path)\n    directories = [\n        entry for entry in entries if os.path.isdir(os.path.join(path, entry))\n    ]\n    return directories\n</code></pre>"},{"location":"apis/markdown/","title":"Markdown Module","text":""},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument","title":"<code>MarkdownDocument</code>","text":"<p>A low-level class for manipulating Markdown files with front matter.</p> <p>This class provides methods to add and modify Markdown content and front matter, supporting nested structures in front matter (e.g., dictionaries within YAML front matter).</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>class MarkdownDocument:\n    \"\"\"\n    A low-level class for manipulating Markdown files with front matter.\n\n    This class provides methods to add and modify Markdown content and front matter,\n    supporting nested structures in front matter (e.g., dictionaries within YAML front matter).\n    \"\"\"\n\n    MANDATORY_FIELDS: List[AnyStr] = []\n\n    def __init__(self, content: str = \"\", metadata: Optional[Dict[str, Any]] = None):\n        \"\"\"\n        Initializes a new MarkdownDocument instance.\n\n        Args:\n            content (str): The Markdown content. Defaults to an empty string.\n            metadata (Optional[Dict[str, Any]]): The front matter metadata as a dictionary. Defaults to None.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(\n            ...     content=\"# Hello World\",\n            ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n            ... )\n        \"\"\"\n        if metadata is None:\n            metadata = {}\n        self.post = frontmatter.Post(content, **metadata)\n\n    @staticmethod\n    def path_preprocess(input_path: Union[str, Path]) -&gt; Path:\n        if isinstance(input_path, str):\n            output_path = Path(input_path)\n        else:\n            output_path = input_path\n        return output_path\n\n    @classmethod\n    def from_file(cls, file_path: Union[Path, str]) -&gt; \"MarkdownDocument\":\n        \"\"\"\n        Creates a MarkdownDocument instance by loading a Markdown file.\n\n        Args:\n            file_path (str): The path to the Markdown file.\n\n        Returns:\n            MarkdownDocument: An instance representing the loaded Markdown file.\n\n        Raises:\n            FileNotFoundError: If the specified file does not exist.\n            frontmatter.InvalidFrontMatterError: If the front matter is malformed.\n        \"\"\"\n        file_path = cls.path_preprocess(file_path)\n        if not file_path.is_file():\n            raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            post = frontmatter.load(f)\n        return cls(content=post.content, metadata=deepcopy(post.metadata))\n\n    @property\n    def content(self) -&gt; str:\n        \"\"\"\n        Retrieves the Markdown content.\n\n        Returns:\n            str: The Markdown content.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(content=\"# Hello World\")\n            &gt;&gt;&gt; doc.content\n            \"# Hello World\"\n        \"\"\"\n        return self.post.content\n\n    @content.setter\n    def content(self, new_content: str) -&gt; None:\n        \"\"\"\n        Sets the Markdown content.\n\n        Args:\n            new_content (str): The new Markdown content.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument()\n            &gt;&gt;&gt; doc.content = \"# New Title\"\n        \"\"\"\n        self.post.content = new_content\n\n    @property\n    def metadata(self) -&gt; Dict[str, Any]:\n        \"\"\"\n        Retrieves the front matter metadata.\n\n        Returns:\n            Dict[str, Any]: The metadata dictionary.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]})\n            &gt;&gt;&gt; doc.metadata\n            {\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n        \"\"\"\n        return self.post.metadata\n\n    @metadata.setter\n    def metadata(self, new_metadata: Dict[str, Any]) -&gt; None:\n        \"\"\"\n        Sets the front matter metadata.\n\n        Args:\n            new_metadata (Dict[str, Any]): The new metadata dictionary.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument()\n            &gt;&gt;&gt; doc.metadata = {\"title\": \"New Greeting\", \"tags\": [\"updated\"]}\n        \"\"\"\n        self.post.metadata = new_metadata\n\n    def add_content(self, content: str, append: bool = True) -&gt; None:\n        \"\"\"\n        Adds content to the Markdown document.\n\n        Args:\n            content (str): The Markdown content to add.\n            append (bool): If True, appends to existing content; otherwise, prepends.\n                           Defaults to True.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument()\n            &gt;&gt;&gt; doc.add_content(\"# Introduction\")\n            &gt;&gt;&gt; doc.add_content(\"Some introductory text.\", append=True)\n        \"\"\"\n        if append:\n            if self.post.content:\n                self.post.content += \"\\n\" + content\n            else:\n                self.post.content = content\n        else:\n            if self.post.content:\n                self.post.content = content + \"\\n\" + self.post.content\n            else:\n                self.post.content = content\n\n    def set_frontmatter(\n        self, key_path: str, value: Any, overwrite: bool = True\n    ) -&gt; None:\n        \"\"\"\n        Sets a front matter key to a specified value. Supports nested keys using dot notation,\n        including mixed types such as dictionaries within lists.\n\n        Args:\n            key_path (str): The front matter key path. Use dot notation for nested keys\n                            (e.g., \"author.name\" or \"sections.0.title\").\n            value (Any): The value to set for the key.\n            overwrite (bool): If True, overwrites the existing value; otherwise, appends to lists\n                              or creates new entries in lists. Defaults to True.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument()\n            &gt;&gt;&gt; doc.set_frontmatter(\"author.name\", \"John Doe\")\n            &gt;&gt;&gt; doc.set_frontmatter(\"author.contact.email\", \"john@example.com\")\n            &gt;&gt;&gt; doc.set_frontmatter(\"sections.0.title\", \"Introduction\")\n            &gt;&gt;&gt; doc.set_frontmatter(\"sections.0.content\", \"Welcome to the introduction.\")\n            &gt;&gt;&gt; doc.set_frontmatter(\"sections.1.title\", \"Conclusion\")\n            &gt;&gt;&gt; doc.set_frontmatter(\"sections.1.content\", \"Wrapping up.\")\n        \"\"\"\n        keys = key_path.split(\".\")\n        current = self.post.metadata\n\n        for i, key in enumerate(keys):\n            is_last = i == len(keys) - 1\n            # Determine if the current key is meant to be a list index\n            if key.isdigit():\n                index = int(key)\n                if not isinstance(current, list):\n                    if overwrite:\n                        # Initialize as list\n                        parent = self.post.metadata\n                        for k in keys[:i]:\n                            if k.isdigit():\n                                parent = parent[int(k)]\n                            else:\n                                parent = parent[k]\n                        parent[int(keys[i - 1])] = []\n                        current = parent[int(keys[i - 1])]\n                    else:\n                        raise TypeError(\n                            f\"Expected list at {'.'.join(keys[:i])}, found {type(current).__name__}\"\n                        )\n                # Extend the list if necessary\n                while len(current) &lt;= index:\n                    current.append({})\n                if is_last:\n                    if isinstance(current[index], list) and not overwrite:\n                        current[index].append(value)\n                    elif isinstance(current[index], dict):\n                        if isinstance(value, dict):\n                            current[index].update(value)\n                        else:\n                            current[index][\"value\"] = value\n                    elif not overwrite:\n                        current[index] = [current[index], value]\n                    else:\n                        current[index] = value\n                else:\n                    if not isinstance(current[index], (dict, list)):\n                        # Initialize as dict or list based on next key\n                        next_key = keys[i + 1]\n                        if next_key.isdigit():\n                            current[index] = []\n                        else:\n                            current[index] = {}\n                    current = current[index]\n            else:\n                if not isinstance(current, dict):\n                    if overwrite:\n                        # Initialize as dict\n                        parent = self.post.metadata\n                        for k in keys[:i]:\n                            if k.isdigit():\n                                parent = parent[int(k)]\n                            else:\n                                parent = parent[k]\n                        parent[keys[i - 1]] = {}\n                        current = parent[keys[i - 1]]\n                    else:\n                        raise TypeError(\n                            f\"Expected dict at {'.'.join(keys[:i])}, found {type(current).__name__}\"\n                        )\n                if is_last:\n                    if key in current:\n                        if isinstance(current[key], list) and not overwrite:\n                            current[key].append(value)\n                        elif isinstance(current[key], dict):\n                            if isinstance(value, dict):\n                                current[key].update(value)\n                            else:\n                                current[key][\"value\"] = value\n                        elif not overwrite:\n                            current[key] = [current[key], value]\n                        else:\n                            current[key] = value\n                    else:\n                        current[key] = value\n                else:\n                    if key not in current or not isinstance(current[key], (dict, list)):\n                        # Initialize as dict or list based on next key\n                        next_key = keys[i + 1]\n                        if next_key.isdigit():\n                            current[key] = []\n                        else:\n                            current[key] = {}\n                    current = current[key]\n\n    def get_frontmatter(self, key_path: str) -&gt; Any:\n        \"\"\"\n        Retrieves the value of a front matter key. Supports nested keys using dot notation,\n        including list indices.\n\n        Args:\n            key_path (str): The front matter key path. Use dot notation for nested keys\n                            (e.g., \"author.name\" or \"sections.0.title\").\n\n        Returns:\n            Any: The value associated with the key, or None if the key does not exist.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(\n            ...     metadata={\n            ...         \"author\": {\"name\": \"John Doe\", \"contact\": {\"email\": \"john@example.com\"}},\n            ...         \"sections\": [\n            ...             {\"title\": \"Introduction\", \"content\": \"Welcome.\"},\n            ...             {\"title\": \"Conclusion\", \"content\": \"Goodbye.\"}\n            ...         ]\n            ...     }\n            ... )\n            &gt;&gt;&gt; doc.get_frontmatter(\"author.name\")\n            \"John Doe\"\n            &gt;&gt;&gt; doc.get_frontmatter(\"sections.0.title\")\n            \"Introduction\"\n            &gt;&gt;&gt; doc.get_frontmatter(\"sections.1.content\")\n            \"Goodbye.\"\n        \"\"\"\n        keys = key_path.split(\".\")\n        metadata = self.post.metadata\n\n        for key in keys:\n            if isinstance(metadata, dict):\n                metadata = metadata.get(key, None)\n            elif isinstance(metadata, list):\n                if key.isdigit():\n                    index = int(key)\n                    if 0 &lt;= index &lt; len(metadata):\n                        metadata = metadata[index]\n                    else:\n                        return None\n                else:\n                    return None\n            else:\n                return None\n\n            if metadata is None:\n                return None\n\n        return metadata\n\n    def remove_frontmatter(self, key_path: str) -&gt; None:\n        \"\"\"\n        Removes a front matter key. Supports nested keys using dot notation,\n        including list indices.\n\n        Args:\n            key_path (str): The front matter key path to remove. Use dot notation for nested keys\n                            (e.g., \"author.contact.email\" or \"sections.0.title\").\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(\n            ...     metadata={\n            ...         \"author\": {\"name\": \"John Doe\", \"contact\": {\"email\": \"john@example.com\"}},\n            ...         \"sections\": [\n            ...             {\"title\": \"Introduction\", \"content\": \"Welcome.\"},\n            ...             {\"title\": \"Conclusion\", \"content\": \"Goodbye.\"}\n            ...         ]\n            ...     }\n            ... )\n            &gt;&gt;&gt; doc.remove_frontmatter(\"author.contact.email\")\n            &gt;&gt;&gt; doc.get_frontmatter(\"author.contact.email\") is None\n            True\n            &gt;&gt;&gt; doc.remove_frontmatter(\"sections.1.title\")\n            &gt;&gt;&gt; doc.get_frontmatter(\"sections.1.title\") is None\n            True\n        \"\"\"\n        keys = key_path.split(\".\")\n        metadata = self.post.metadata\n\n        for i, key in enumerate(keys):\n            is_last = i == len(keys) - 1\n            if isinstance(metadata, dict):\n                if key not in metadata:\n                    return  # Key path does not exist; nothing to remove\n                if is_last:\n                    del metadata[key]\n                    return\n                metadata = metadata[key]\n            elif isinstance(metadata, list):\n                if key.isdigit():\n                    index = int(key)\n                    if 0 &lt;= index &lt; len(metadata):\n                        if is_last:\n                            del metadata[index]\n                            return\n                        metadata = metadata[index]\n                    else:\n                        return  # Index out of range; nothing to remove\n                else:\n                    return  # Invalid key for list; nothing to remove\n            else:\n                return  # Neither dict nor list; nothing to remove\n\n    def to_markdown(self) -&gt; str:\n        \"\"\"\n        Serializes the MarkdownDocument to a Markdown-formatted string, including front matter.\n\n        Returns:\n            str: The complete Markdown content with front matter.\n\n        ERROR:\n            ValueError: If the front matter is missing mandatory fields.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(\n            ...     content=\"# Hello World\",\n            ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n            ... )\n            &gt;&gt;&gt; print(doc.to_markdown())\n            ---\n            title: Greeting\n            tags:\n              - intro\n              - welcome\n            ---\n\n            # Hello World\n        \"\"\"\n        self.validation_frontmatter()\n        return frontmatter.dumps(self.post)\n\n    def save(self, file_path: Union[Path, str]) -&gt; None:\n        \"\"\"\n        Saves the MarkdownDocument to a specified file.\n\n        Args:\n            file_path (str): The path where the Markdown file will be saved.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(\n            ...     content=\"# Hello World\",\n            ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n            ... )\n            &gt;&gt;&gt; doc.save_to_file(\"greeting.md\")\n        \"\"\"\n        file_path = self.path_preprocess(file_path)\n        markdown_str = self.to_markdown()\n        with open(file_path, \"w\", encoding=\"utf-8\") as f:\n            f.write(markdown_str)\n\n    def load_from_file(self, file_path: Union[Path, str]) -&gt; None:\n        \"\"\"\n        Loads Markdown content and front matter from a specified file into the current instance.\n\n        Args:\n            file_path (str): The path to the Markdown file to load.\n\n        Raises:\n            FileNotFoundError: If the specified file does not exist.\n            frontmatter.InvalidFrontMatterError: If the front matter is malformed.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument()\n            &gt;&gt;&gt; doc.load_from_file(\"existing.md\")\n        \"\"\"\n        file_path = self.path_preprocess(file_path)\n        if not os.path.isfile(file_path):\n            raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            post = frontmatter.load(f)\n\n        self.post.content = post.content\n        self.post.metadata = deepcopy(post.metadata)\n\n    def clear_content(self) -&gt; None:\n        \"\"\"\n        Clears all Markdown content, leaving only the front matter.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(content=\"# Hello World\")\n            &gt;&gt;&gt; doc.clear_content()\n            &gt;&gt;&gt; print(doc.content)\n            \"\"\n        \"\"\"\n        self.post.content = \"\"\n\n    def clear_frontmatter(self) -&gt; None:\n        \"\"\"\n        Clears all front matter metadata, leaving only the Markdown content.\n\n        Example:\n            &gt;&gt;&gt; doc = MarkdownDocument(\n            ...     content=\"# Hello World\",\n            ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n            ... )\n            &gt;&gt;&gt; doc.clear_frontmatter()\n            &gt;&gt;&gt; print(doc.metadata)\n            {}\n        \"\"\"\n        self.post.metadata = {}\n\n    def validation_frontmatter(self):\n        \"\"\"\n        Validate the frontmatter metadata against the mandatory fields.\n        \"\"\"\n        missing_fields = []\n        for field in self.MANDATORY_FIELDS:\n            if self.get_frontmatter(field) is None:\n                missing_fields.append(field)\n\n        if missing_fields:\n            missing = \", \".join(missing_fields)\n            raise ValueError(f\"Missing mandatory front matter fields: {missing}\")\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.content","title":"<code>content</code>  <code>property</code> <code>writable</code>","text":"<p>Retrieves the Markdown content.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The Markdown content.</p> Example <p>doc = MarkdownDocument(content=\"# Hello World\") doc.content \"# Hello World\"</p>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.metadata","title":"<code>metadata</code>  <code>property</code> <code>writable</code>","text":"<p>Retrieves the front matter metadata.</p> <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dict[str, Any]: The metadata dictionary.</p> Example <p>doc = MarkdownDocument(metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}) doc.metadata {\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}</p>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.__init__","title":"<code>__init__(content='', metadata=None)</code>","text":"<p>Initializes a new MarkdownDocument instance.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The Markdown content. Defaults to an empty string.</p> <code>''</code> <code>metadata</code> <code>Optional[Dict[str, Any]]</code> <p>The front matter metadata as a dictionary. Defaults to None.</p> <code>None</code> Example <p>doc = MarkdownDocument( ...     content=\"# Hello World\", ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]} ... )</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def __init__(self, content: str = \"\", metadata: Optional[Dict[str, Any]] = None):\n    \"\"\"\n    Initializes a new MarkdownDocument instance.\n\n    Args:\n        content (str): The Markdown content. Defaults to an empty string.\n        metadata (Optional[Dict[str, Any]]): The front matter metadata as a dictionary. Defaults to None.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(\n        ...     content=\"# Hello World\",\n        ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n        ... )\n    \"\"\"\n    if metadata is None:\n        metadata = {}\n    self.post = frontmatter.Post(content, **metadata)\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.add_content","title":"<code>add_content(content, append=True)</code>","text":"<p>Adds content to the Markdown document.</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>The Markdown content to add.</p> required <code>append</code> <code>bool</code> <p>If True, appends to existing content; otherwise, prepends.            Defaults to True.</p> <code>True</code> Example <p>doc = MarkdownDocument() doc.add_content(\"# Introduction\") doc.add_content(\"Some introductory text.\", append=True)</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def add_content(self, content: str, append: bool = True) -&gt; None:\n    \"\"\"\n    Adds content to the Markdown document.\n\n    Args:\n        content (str): The Markdown content to add.\n        append (bool): If True, appends to existing content; otherwise, prepends.\n                       Defaults to True.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument()\n        &gt;&gt;&gt; doc.add_content(\"# Introduction\")\n        &gt;&gt;&gt; doc.add_content(\"Some introductory text.\", append=True)\n    \"\"\"\n    if append:\n        if self.post.content:\n            self.post.content += \"\\n\" + content\n        else:\n            self.post.content = content\n    else:\n        if self.post.content:\n            self.post.content = content + \"\\n\" + self.post.content\n        else:\n            self.post.content = content\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.clear_content","title":"<code>clear_content()</code>","text":"<p>Clears all Markdown content, leaving only the front matter.</p> Example <p>doc = MarkdownDocument(content=\"# Hello World\") doc.clear_content() print(doc.content) \"\"</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def clear_content(self) -&gt; None:\n    \"\"\"\n    Clears all Markdown content, leaving only the front matter.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(content=\"# Hello World\")\n        &gt;&gt;&gt; doc.clear_content()\n        &gt;&gt;&gt; print(doc.content)\n        \"\"\n    \"\"\"\n    self.post.content = \"\"\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.clear_frontmatter","title":"<code>clear_frontmatter()</code>","text":"<p>Clears all front matter metadata, leaving only the Markdown content.</p> Example <p>doc = MarkdownDocument( ...     content=\"# Hello World\", ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]} ... ) doc.clear_frontmatter() print(doc.metadata) {}</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def clear_frontmatter(self) -&gt; None:\n    \"\"\"\n    Clears all front matter metadata, leaving only the Markdown content.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(\n        ...     content=\"# Hello World\",\n        ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n        ... )\n        &gt;&gt;&gt; doc.clear_frontmatter()\n        &gt;&gt;&gt; print(doc.metadata)\n        {}\n    \"\"\"\n    self.post.metadata = {}\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>Creates a MarkdownDocument instance by loading a Markdown file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the Markdown file.</p> required <p>Returns:</p> Name Type Description <code>MarkdownDocument</code> <code>MarkdownDocument</code> <p>An instance representing the loaded Markdown file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file does not exist.</p> <code>InvalidFrontMatterError</code> <p>If the front matter is malformed.</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: Union[Path, str]) -&gt; \"MarkdownDocument\":\n    \"\"\"\n    Creates a MarkdownDocument instance by loading a Markdown file.\n\n    Args:\n        file_path (str): The path to the Markdown file.\n\n    Returns:\n        MarkdownDocument: An instance representing the loaded Markdown file.\n\n    Raises:\n        FileNotFoundError: If the specified file does not exist.\n        frontmatter.InvalidFrontMatterError: If the front matter is malformed.\n    \"\"\"\n    file_path = cls.path_preprocess(file_path)\n    if not file_path.is_file():\n        raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        post = frontmatter.load(f)\n    return cls(content=post.content, metadata=deepcopy(post.metadata))\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.get_frontmatter","title":"<code>get_frontmatter(key_path)</code>","text":"<p>Retrieves the value of a front matter key. Supports nested keys using dot notation, including list indices.</p> <p>Parameters:</p> Name Type Description Default <code>key_path</code> <code>str</code> <p>The front matter key path. Use dot notation for nested keys             (e.g., \"author.name\" or \"sections.0.title\").</p> required <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The value associated with the key, or None if the key does not exist.</p> Example <p>doc = MarkdownDocument( ...     metadata={ ...         \"author\": {\"name\": \"John Doe\", \"contact\": {\"email\": \"john@example.com\"}}, ...         \"sections\": [ ...             {\"title\": \"Introduction\", \"content\": \"Welcome.\"}, ...             {\"title\": \"Conclusion\", \"content\": \"Goodbye.\"} ...         ] ...     } ... ) doc.get_frontmatter(\"author.name\") \"John Doe\" doc.get_frontmatter(\"sections.0.title\") \"Introduction\" doc.get_frontmatter(\"sections.1.content\") \"Goodbye.\"</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def get_frontmatter(self, key_path: str) -&gt; Any:\n    \"\"\"\n    Retrieves the value of a front matter key. Supports nested keys using dot notation,\n    including list indices.\n\n    Args:\n        key_path (str): The front matter key path. Use dot notation for nested keys\n                        (e.g., \"author.name\" or \"sections.0.title\").\n\n    Returns:\n        Any: The value associated with the key, or None if the key does not exist.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(\n        ...     metadata={\n        ...         \"author\": {\"name\": \"John Doe\", \"contact\": {\"email\": \"john@example.com\"}},\n        ...         \"sections\": [\n        ...             {\"title\": \"Introduction\", \"content\": \"Welcome.\"},\n        ...             {\"title\": \"Conclusion\", \"content\": \"Goodbye.\"}\n        ...         ]\n        ...     }\n        ... )\n        &gt;&gt;&gt; doc.get_frontmatter(\"author.name\")\n        \"John Doe\"\n        &gt;&gt;&gt; doc.get_frontmatter(\"sections.0.title\")\n        \"Introduction\"\n        &gt;&gt;&gt; doc.get_frontmatter(\"sections.1.content\")\n        \"Goodbye.\"\n    \"\"\"\n    keys = key_path.split(\".\")\n    metadata = self.post.metadata\n\n    for key in keys:\n        if isinstance(metadata, dict):\n            metadata = metadata.get(key, None)\n        elif isinstance(metadata, list):\n            if key.isdigit():\n                index = int(key)\n                if 0 &lt;= index &lt; len(metadata):\n                    metadata = metadata[index]\n                else:\n                    return None\n            else:\n                return None\n        else:\n            return None\n\n        if metadata is None:\n            return None\n\n    return metadata\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.load_from_file","title":"<code>load_from_file(file_path)</code>","text":"<p>Loads Markdown content and front matter from a specified file into the current instance.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the Markdown file to load.</p> required <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file does not exist.</p> <code>InvalidFrontMatterError</code> <p>If the front matter is malformed.</p> Example <p>doc = MarkdownDocument() doc.load_from_file(\"existing.md\")</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def load_from_file(self, file_path: Union[Path, str]) -&gt; None:\n    \"\"\"\n    Loads Markdown content and front matter from a specified file into the current instance.\n\n    Args:\n        file_path (str): The path to the Markdown file to load.\n\n    Raises:\n        FileNotFoundError: If the specified file does not exist.\n        frontmatter.InvalidFrontMatterError: If the front matter is malformed.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument()\n        &gt;&gt;&gt; doc.load_from_file(\"existing.md\")\n    \"\"\"\n    file_path = self.path_preprocess(file_path)\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        post = frontmatter.load(f)\n\n    self.post.content = post.content\n    self.post.metadata = deepcopy(post.metadata)\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.remove_frontmatter","title":"<code>remove_frontmatter(key_path)</code>","text":"<p>Removes a front matter key. Supports nested keys using dot notation, including list indices.</p> <p>Parameters:</p> Name Type Description Default <code>key_path</code> <code>str</code> <p>The front matter key path to remove. Use dot notation for nested keys             (e.g., \"author.contact.email\" or \"sections.0.title\").</p> required Example <p>doc = MarkdownDocument( ...     metadata={ ...         \"author\": {\"name\": \"John Doe\", \"contact\": {\"email\": \"john@example.com\"}}, ...         \"sections\": [ ...             {\"title\": \"Introduction\", \"content\": \"Welcome.\"}, ...             {\"title\": \"Conclusion\", \"content\": \"Goodbye.\"} ...         ] ...     } ... ) doc.remove_frontmatter(\"author.contact.email\") doc.get_frontmatter(\"author.contact.email\") is None True doc.remove_frontmatter(\"sections.1.title\") doc.get_frontmatter(\"sections.1.title\") is None True</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def remove_frontmatter(self, key_path: str) -&gt; None:\n    \"\"\"\n    Removes a front matter key. Supports nested keys using dot notation,\n    including list indices.\n\n    Args:\n        key_path (str): The front matter key path to remove. Use dot notation for nested keys\n                        (e.g., \"author.contact.email\" or \"sections.0.title\").\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(\n        ...     metadata={\n        ...         \"author\": {\"name\": \"John Doe\", \"contact\": {\"email\": \"john@example.com\"}},\n        ...         \"sections\": [\n        ...             {\"title\": \"Introduction\", \"content\": \"Welcome.\"},\n        ...             {\"title\": \"Conclusion\", \"content\": \"Goodbye.\"}\n        ...         ]\n        ...     }\n        ... )\n        &gt;&gt;&gt; doc.remove_frontmatter(\"author.contact.email\")\n        &gt;&gt;&gt; doc.get_frontmatter(\"author.contact.email\") is None\n        True\n        &gt;&gt;&gt; doc.remove_frontmatter(\"sections.1.title\")\n        &gt;&gt;&gt; doc.get_frontmatter(\"sections.1.title\") is None\n        True\n    \"\"\"\n    keys = key_path.split(\".\")\n    metadata = self.post.metadata\n\n    for i, key in enumerate(keys):\n        is_last = i == len(keys) - 1\n        if isinstance(metadata, dict):\n            if key not in metadata:\n                return  # Key path does not exist; nothing to remove\n            if is_last:\n                del metadata[key]\n                return\n            metadata = metadata[key]\n        elif isinstance(metadata, list):\n            if key.isdigit():\n                index = int(key)\n                if 0 &lt;= index &lt; len(metadata):\n                    if is_last:\n                        del metadata[index]\n                        return\n                    metadata = metadata[index]\n                else:\n                    return  # Index out of range; nothing to remove\n            else:\n                return  # Invalid key for list; nothing to remove\n        else:\n            return  # Neither dict nor list; nothing to remove\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.save","title":"<code>save(file_path)</code>","text":"<p>Saves the MarkdownDocument to a specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path where the Markdown file will be saved.</p> required Example <p>doc = MarkdownDocument( ...     content=\"# Hello World\", ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]} ... ) doc.save_to_file(\"greeting.md\")</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def save(self, file_path: Union[Path, str]) -&gt; None:\n    \"\"\"\n    Saves the MarkdownDocument to a specified file.\n\n    Args:\n        file_path (str): The path where the Markdown file will be saved.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(\n        ...     content=\"# Hello World\",\n        ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n        ... )\n        &gt;&gt;&gt; doc.save_to_file(\"greeting.md\")\n    \"\"\"\n    file_path = self.path_preprocess(file_path)\n    markdown_str = self.to_markdown()\n    with open(file_path, \"w\", encoding=\"utf-8\") as f:\n        f.write(markdown_str)\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.set_frontmatter","title":"<code>set_frontmatter(key_path, value, overwrite=True)</code>","text":"<p>Sets a front matter key to a specified value. Supports nested keys using dot notation, including mixed types such as dictionaries within lists.</p> <p>Parameters:</p> Name Type Description Default <code>key_path</code> <code>str</code> <p>The front matter key path. Use dot notation for nested keys             (e.g., \"author.name\" or \"sections.0.title\").</p> required <code>value</code> <code>Any</code> <p>The value to set for the key.</p> required <code>overwrite</code> <code>bool</code> <p>If True, overwrites the existing value; otherwise, appends to lists               or creates new entries in lists. Defaults to True.</p> <code>True</code> Example <p>doc = MarkdownDocument() doc.set_frontmatter(\"author.name\", \"John Doe\") doc.set_frontmatter(\"author.contact.email\", \"john@example.com\") doc.set_frontmatter(\"sections.0.title\", \"Introduction\") doc.set_frontmatter(\"sections.0.content\", \"Welcome to the introduction.\") doc.set_frontmatter(\"sections.1.title\", \"Conclusion\") doc.set_frontmatter(\"sections.1.content\", \"Wrapping up.\")</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def set_frontmatter(\n    self, key_path: str, value: Any, overwrite: bool = True\n) -&gt; None:\n    \"\"\"\n    Sets a front matter key to a specified value. Supports nested keys using dot notation,\n    including mixed types such as dictionaries within lists.\n\n    Args:\n        key_path (str): The front matter key path. Use dot notation for nested keys\n                        (e.g., \"author.name\" or \"sections.0.title\").\n        value (Any): The value to set for the key.\n        overwrite (bool): If True, overwrites the existing value; otherwise, appends to lists\n                          or creates new entries in lists. Defaults to True.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument()\n        &gt;&gt;&gt; doc.set_frontmatter(\"author.name\", \"John Doe\")\n        &gt;&gt;&gt; doc.set_frontmatter(\"author.contact.email\", \"john@example.com\")\n        &gt;&gt;&gt; doc.set_frontmatter(\"sections.0.title\", \"Introduction\")\n        &gt;&gt;&gt; doc.set_frontmatter(\"sections.0.content\", \"Welcome to the introduction.\")\n        &gt;&gt;&gt; doc.set_frontmatter(\"sections.1.title\", \"Conclusion\")\n        &gt;&gt;&gt; doc.set_frontmatter(\"sections.1.content\", \"Wrapping up.\")\n    \"\"\"\n    keys = key_path.split(\".\")\n    current = self.post.metadata\n\n    for i, key in enumerate(keys):\n        is_last = i == len(keys) - 1\n        # Determine if the current key is meant to be a list index\n        if key.isdigit():\n            index = int(key)\n            if not isinstance(current, list):\n                if overwrite:\n                    # Initialize as list\n                    parent = self.post.metadata\n                    for k in keys[:i]:\n                        if k.isdigit():\n                            parent = parent[int(k)]\n                        else:\n                            parent = parent[k]\n                    parent[int(keys[i - 1])] = []\n                    current = parent[int(keys[i - 1])]\n                else:\n                    raise TypeError(\n                        f\"Expected list at {'.'.join(keys[:i])}, found {type(current).__name__}\"\n                    )\n            # Extend the list if necessary\n            while len(current) &lt;= index:\n                current.append({})\n            if is_last:\n                if isinstance(current[index], list) and not overwrite:\n                    current[index].append(value)\n                elif isinstance(current[index], dict):\n                    if isinstance(value, dict):\n                        current[index].update(value)\n                    else:\n                        current[index][\"value\"] = value\n                elif not overwrite:\n                    current[index] = [current[index], value]\n                else:\n                    current[index] = value\n            else:\n                if not isinstance(current[index], (dict, list)):\n                    # Initialize as dict or list based on next key\n                    next_key = keys[i + 1]\n                    if next_key.isdigit():\n                        current[index] = []\n                    else:\n                        current[index] = {}\n                current = current[index]\n        else:\n            if not isinstance(current, dict):\n                if overwrite:\n                    # Initialize as dict\n                    parent = self.post.metadata\n                    for k in keys[:i]:\n                        if k.isdigit():\n                            parent = parent[int(k)]\n                        else:\n                            parent = parent[k]\n                    parent[keys[i - 1]] = {}\n                    current = parent[keys[i - 1]]\n                else:\n                    raise TypeError(\n                        f\"Expected dict at {'.'.join(keys[:i])}, found {type(current).__name__}\"\n                    )\n            if is_last:\n                if key in current:\n                    if isinstance(current[key], list) and not overwrite:\n                        current[key].append(value)\n                    elif isinstance(current[key], dict):\n                        if isinstance(value, dict):\n                            current[key].update(value)\n                        else:\n                            current[key][\"value\"] = value\n                    elif not overwrite:\n                        current[key] = [current[key], value]\n                    else:\n                        current[key] = value\n                else:\n                    current[key] = value\n            else:\n                if key not in current or not isinstance(current[key], (dict, list)):\n                    # Initialize as dict or list based on next key\n                    next_key = keys[i + 1]\n                    if next_key.isdigit():\n                        current[key] = []\n                    else:\n                        current[key] = {}\n                current = current[key]\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.to_markdown","title":"<code>to_markdown()</code>","text":"<p>Serializes the MarkdownDocument to a Markdown-formatted string, including front matter.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The complete Markdown content with front matter.</p> ERROR <p>ValueError: If the front matter is missing mandatory fields.</p> Example <p>doc = MarkdownDocument( ...     content=\"# Hello World\", ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]} ... ) print(doc.to_markdown())</p> <p>title: Greeting tags:   - intro   - welcome</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def to_markdown(self) -&gt; str:\n    \"\"\"\n    Serializes the MarkdownDocument to a Markdown-formatted string, including front matter.\n\n    Returns:\n        str: The complete Markdown content with front matter.\n\n    ERROR:\n        ValueError: If the front matter is missing mandatory fields.\n\n    Example:\n        &gt;&gt;&gt; doc = MarkdownDocument(\n        ...     content=\"# Hello World\",\n        ...     metadata={\"title\": \"Greeting\", \"tags\": [\"intro\", \"welcome\"]}\n        ... )\n        &gt;&gt;&gt; print(doc.to_markdown())\n        ---\n        title: Greeting\n        tags:\n          - intro\n          - welcome\n        ---\n\n        # Hello World\n    \"\"\"\n    self.validation_frontmatter()\n    return frontmatter.dumps(self.post)\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.to_markdown--hello-world","title":"Hello World","text":""},{"location":"apis/markdown/#ures.markdown.manipulator.MarkdownDocument.validation_frontmatter","title":"<code>validation_frontmatter()</code>","text":"<p>Validate the frontmatter metadata against the mandatory fields.</p> Source code in <code>ures/markdown/manipulator.py</code> <pre><code>def validation_frontmatter(self):\n    \"\"\"\n    Validate the frontmatter metadata against the mandatory fields.\n    \"\"\"\n    missing_fields = []\n    for field in self.MANDATORY_FIELDS:\n        if self.get_frontmatter(field) is None:\n            missing_fields.append(field)\n\n    if missing_fields:\n        missing = \", \".join(missing_fields)\n        raise ValueError(f\"Missing mandatory front matter fields: {missing}\")\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.zettelkasten.Zettelkasten","title":"<code>Zettelkasten</code>","text":"<p>               Bases: <code>MarkdownDocument</code></p> <p>Class for handling Zettelkasten markdown files. In my case, a list of mandatory fields is defined in a class variable.</p> <p>In Zettelkasten note-taking system, only three types of notes are supported: 'fleeting', 'literature', 'permanent', but I added 'atom' type for my own use.</p> Source code in <code>ures/markdown/zettelkasten.py</code> <pre><code>class Zettelkasten(MarkdownDocument):\n    \"\"\"\n    Class for handling Zettelkasten markdown files. In my case, a list of mandatory fields is defined in a class\n    variable.\n\n    In Zettelkasten note-taking system, only three types of notes are supported: 'fleeting', 'literature', 'permanent',\n    but I added 'atom' type for my own use.\n    \"\"\"\n\n    MANDATORY_FIELDS = [\"title\", \"type\", \"url\", \"create\", \"id\", \"tags\", \"aliases\"]\n    ALLOWED_TYPES = [\"fleeting\", \"literature\", \"permanent\", \"atom\"]\n\n    def __init__(\n        self,\n        title: str,\n        n_type: str,\n        url: Optional[str] = None,\n        tags: Optional[list] = None,\n        aliases: Optional[list] = None,\n    ):\n        \"\"\"\n        Initialize a Zettelkasten object\n        Args:\n            title (str): The title of the note.\n            n_type (str): The type of the note, only support 'fleeting', 'literature', 'permanent' and 'atom'.\n            url (str): The url of the note.\n            tags (list): The tags of the note.\n            aliases\n        \"\"\"\n        if not isinstance(title, str) or not title.strip():\n            raise ValueError(\"Title must be a non-empty string.\")\n        if n_type not in self.ALLOWED_TYPES:\n            raise ValueError(\n                f\"Invalid type '{n_type}'. Allowed types are: {', '.join(self.ALLOWED_TYPES)}.\"\n            )\n        if url is not None and not isinstance(url, str):\n            raise ValueError(\"URL must be a string.\")\n        if tags is not None and not isinstance(tags, list):\n            raise ValueError(\"Tags must be a list.\")\n        if aliases is not None and not isinstance(aliases, list):\n            raise ValueError(\"Aliases must be a list.\")\n\n        _metadata = {\n            \"id\": zettelkasten_id(),\n            \"create\": time_now(),\n        }\n        super().__init__(metadata=_metadata)\n        self.title = title\n        self.type = n_type\n        self.url = url or \"\"\n        self.tags = tags or []\n        self.aliases = aliases or []\n\n    @classmethod\n    def from_file(cls, file_path: str) -&gt; \"MarkdownDocument\":\n        \"\"\"\n        Creates a MarkdownDocument instance by loading a Markdown file.\n\n        Args:\n            file_path (str): The path to the Markdown file.\n\n        Returns:\n            MarkdownDocument: An instance representing the loaded Markdown file.\n\n        Raises:\n            FileNotFoundError: If the specified file does not exist.\n            frontmatter.InvalidFrontMatterError: If the front matter is malformed.\n        \"\"\"\n        if not os.path.isfile(file_path):\n            raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            post = frontmatter.load(f)\n        zk = cls(\n            title=post.metadata.get(\"title\", None),\n            n_type=post.metadata.get(\"type\", None),\n            url=post.metadata.get(\"url\", None),\n            tags=post.metadata.get(\"tags\", None),\n            aliases=post.metadata.get(\"aliases\", None),\n        )\n        zk.metadata[\"id\"] = post.metadata.get(\"id\", zk.metadata[\"id\"])\n        zk.metadata[\"create\"] = post.metadata.get(\"create\", zk.metadata[\"create\"])\n        zk.add_content(post.content)\n        return zk\n\n    @property\n    def title(self) -&gt; str:\n        return self.get_frontmatter(\"title\")\n\n    @title.setter\n    def title(self, value):\n        if not isinstance(value, str) or not value.strip():\n            raise ValueError(\"Title must be a non-empty string.\")\n        self.set_frontmatter(\"title\", value)\n\n    @property\n    def type(self) -&gt; str:\n        return self.get_frontmatter(\"type\")\n\n    @type.setter\n    def type(self, value):\n        if value not in self.ALLOWED_TYPES:\n            raise ValueError(\n                f\"Invalid type '{value}'. Allowed types are: {', '.join(self.ALLOWED_TYPES)}.\"\n            )\n        self.set_frontmatter(\"type\", value)\n\n    @property\n    def url(self) -&gt; str:\n        return self.get_frontmatter(\"url\")\n\n    @url.setter\n    def url(self, value):\n        if not isinstance(value, str):\n            raise ValueError(\"URL must be a string.\")\n        self.set_frontmatter(\"url\", value)\n\n    @property\n    def tags(self) -&gt; list:\n        return self.get_frontmatter(\"tags\")\n\n    @tags.setter\n    def tags(self, value):\n        if not isinstance(value, list):\n            raise ValueError(\"Tags must be a list.\")\n        self.set_frontmatter(\"tags\", value)\n\n    @property\n    def aliases(self) -&gt; list:\n        return self.get_frontmatter(\"aliases\")\n\n    @aliases.setter\n    def aliases(self, value):\n        if not isinstance(value, list):\n            raise ValueError(\"Aliases must be a list.\")\n        self.set_frontmatter(\"aliases\", value)\n\n    def add_tag(self, tag: str):\n        self.tags.append(tag)\n\n    def remove_tag(self, tag: str):\n        self.tags.remove(tag)\n\n    def add_alias(self, alias: str):\n        self.aliases.append(alias)\n\n    def remove_alias(self, alias: str):\n        self.aliases.remove(alias)\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.zettelkasten.Zettelkasten.__init__","title":"<code>__init__(title, n_type, url=None, tags=None, aliases=None)</code>","text":"<p>Initialize a Zettelkasten object Args:     title (str): The title of the note.     n_type (str): The type of the note, only support 'fleeting', 'literature', 'permanent' and 'atom'.     url (str): The url of the note.     tags (list): The tags of the note.     aliases</p> Source code in <code>ures/markdown/zettelkasten.py</code> <pre><code>def __init__(\n    self,\n    title: str,\n    n_type: str,\n    url: Optional[str] = None,\n    tags: Optional[list] = None,\n    aliases: Optional[list] = None,\n):\n    \"\"\"\n    Initialize a Zettelkasten object\n    Args:\n        title (str): The title of the note.\n        n_type (str): The type of the note, only support 'fleeting', 'literature', 'permanent' and 'atom'.\n        url (str): The url of the note.\n        tags (list): The tags of the note.\n        aliases\n    \"\"\"\n    if not isinstance(title, str) or not title.strip():\n        raise ValueError(\"Title must be a non-empty string.\")\n    if n_type not in self.ALLOWED_TYPES:\n        raise ValueError(\n            f\"Invalid type '{n_type}'. Allowed types are: {', '.join(self.ALLOWED_TYPES)}.\"\n        )\n    if url is not None and not isinstance(url, str):\n        raise ValueError(\"URL must be a string.\")\n    if tags is not None and not isinstance(tags, list):\n        raise ValueError(\"Tags must be a list.\")\n    if aliases is not None and not isinstance(aliases, list):\n        raise ValueError(\"Aliases must be a list.\")\n\n    _metadata = {\n        \"id\": zettelkasten_id(),\n        \"create\": time_now(),\n    }\n    super().__init__(metadata=_metadata)\n    self.title = title\n    self.type = n_type\n    self.url = url or \"\"\n    self.tags = tags or []\n    self.aliases = aliases or []\n</code></pre>"},{"location":"apis/markdown/#ures.markdown.zettelkasten.Zettelkasten.from_file","title":"<code>from_file(file_path)</code>  <code>classmethod</code>","text":"<p>Creates a MarkdownDocument instance by loading a Markdown file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>The path to the Markdown file.</p> required <p>Returns:</p> Name Type Description <code>MarkdownDocument</code> <code>MarkdownDocument</code> <p>An instance representing the loaded Markdown file.</p> <p>Raises:</p> Type Description <code>FileNotFoundError</code> <p>If the specified file does not exist.</p> <code>InvalidFrontMatterError</code> <p>If the front matter is malformed.</p> Source code in <code>ures/markdown/zettelkasten.py</code> <pre><code>@classmethod\ndef from_file(cls, file_path: str) -&gt; \"MarkdownDocument\":\n    \"\"\"\n    Creates a MarkdownDocument instance by loading a Markdown file.\n\n    Args:\n        file_path (str): The path to the Markdown file.\n\n    Returns:\n        MarkdownDocument: An instance representing the loaded Markdown file.\n\n    Raises:\n        FileNotFoundError: If the specified file does not exist.\n        frontmatter.InvalidFrontMatterError: If the front matter is malformed.\n    \"\"\"\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(f\"The file '{file_path}' does not exist.\")\n\n    with open(file_path, \"r\", encoding=\"utf-8\") as f:\n        post = frontmatter.load(f)\n    zk = cls(\n        title=post.metadata.get(\"title\", None),\n        n_type=post.metadata.get(\"type\", None),\n        url=post.metadata.get(\"url\", None),\n        tags=post.metadata.get(\"tags\", None),\n        aliases=post.metadata.get(\"aliases\", None),\n    )\n    zk.metadata[\"id\"] = post.metadata.get(\"id\", zk.metadata[\"id\"])\n    zk.metadata[\"create\"] = post.metadata.get(\"create\", zk.metadata[\"create\"])\n    zk.add_content(post.content)\n    return zk\n</code></pre>"},{"location":"apis/network/","title":"Network Related Module","text":""},{"location":"apis/network/#ures.network.generate_ip","title":"<code>generate_ip(subnet, last_index)</code>","text":"<p>Generate a new IP address within a given subnet based on an offset.</p> <p>The function adds the provided 'last_index' to the network address of the specified subnet (given in CIDR notation) to compute a new IP address.</p> <p>Parameters:</p> Name Type Description Default <code>subnet</code> <code>str</code> <p>The subnet in CIDR notation (e.g., \"192.168.0.0/24\").</p> required <code>last_index</code> <code>int</code> <p>The offset to add to the network address.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The generated IP address as a string.</p> Example <p>generate_ip(\"192.168.0.0/24\", 100) '192.168.0.100'</p> Source code in <code>ures/network.py</code> <pre><code>def generate_ip(subnet: str, last_index: int) -&gt; str:\n    \"\"\"\n    Generate a new IP address within a given subnet based on an offset.\n\n    The function adds the provided 'last_index' to the network address of the specified\n    subnet (given in CIDR notation) to compute a new IP address.\n\n    Args:\n        subnet (str): The subnet in CIDR notation (e.g., \"192.168.0.0/24\").\n        last_index (int): The offset to add to the network address.\n\n    Returns:\n        str: The generated IP address as a string.\n\n    Example:\n        &gt;&gt;&gt; generate_ip(\"192.168.0.0/24\", 100)\n        '192.168.0.100'\n    \"\"\"\n    network = ipaddress.ip_network(subnet)\n    new_ip = network.network_address + last_index\n    return str(new_ip)\n</code></pre>"},{"location":"apis/network/#ures.network.is_valid_ip_netmask","title":"<code>is_valid_ip_netmask(ip, netmask)</code>","text":"<p>Validate whether an IP address and a given subnet mask form a valid subnet.</p> <p>This function checks if the provided IP address (IPv4 or IPv6) and its subnet mask (provided either in CIDR notation or dot-decimal format for IPv4) are valid when used together to define a network.</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>The IP address (e.g., \"192.168.1.1\" or \"2001:db8::1\").</p> required <code>netmask</code> <code>str</code> <p>The subnet mask, which can be provided as a CIDR value (e.g., \"24\")            or in dot-decimal format (e.g., \"255.255.255.0\" for IPv4).</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the IP address and subnet mask form a valid subnet, False otherwise.</p> Example <p>is_valid_ip_netmask(\"192.168.1.1\", \"255.255.255.0\") True is_valid_ip_netmask(\"192.168.1.1\", \"24\") True is_valid_ip_netmask(\"2001:db8::1\", \"64\") True is_valid_ip_netmask(\"192.168.1.1\", \"255.255.0.255\") False is_valid_ip_netmask(\"300.168.1.1\", \"24\") False</p> Source code in <code>ures/network.py</code> <pre><code>def is_valid_ip_netmask(ip: str, netmask: str) -&gt; bool:\n    \"\"\"\n    Validate whether an IP address and a given subnet mask form a valid subnet.\n\n    This function checks if the provided IP address (IPv4 or IPv6) and its subnet mask\n    (provided either in CIDR notation or dot-decimal format for IPv4) are valid when used\n    together to define a network.\n\n    Args:\n        ip (str): The IP address (e.g., \"192.168.1.1\" or \"2001:db8::1\").\n        netmask (str): The subnet mask, which can be provided as a CIDR value (e.g., \"24\")\n                       or in dot-decimal format (e.g., \"255.255.255.0\" for IPv4).\n\n    Returns:\n        bool: True if the IP address and subnet mask form a valid subnet, False otherwise.\n\n    Example:\n        &gt;&gt;&gt; is_valid_ip_netmask(\"192.168.1.1\", \"255.255.255.0\")\n        True\n        &gt;&gt;&gt; is_valid_ip_netmask(\"192.168.1.1\", \"24\")\n        True\n        &gt;&gt;&gt; is_valid_ip_netmask(\"2001:db8::1\", \"64\")\n        True\n        &gt;&gt;&gt; is_valid_ip_netmask(\"192.168.1.1\", \"255.255.0.255\")\n        False\n        &gt;&gt;&gt; is_valid_ip_netmask(\"300.168.1.1\", \"24\")\n        False\n    \"\"\"\n    try:\n        ip_obj = ipaddress.ip_address(ip)\n        if netmask.isdigit():\n            prefix_length = int(netmask)\n            if isinstance(ip_obj, ipaddress.IPv4Address) and 0 &lt;= prefix_length &lt;= 32:\n                return True\n            if isinstance(ip_obj, ipaddress.IPv6Address) and 0 &lt;= prefix_length &lt;= 128:\n                return True\n        else:\n            try:\n                # Attempt to create a network with the given dot-decimal mask.\n                ipaddress.ip_network(f\"{ip}/{netmask}\", strict=False)\n                return True\n            except ValueError:\n                return False\n    except ValueError:\n        return False\n</code></pre>"},{"location":"apis/network/#ures.network.verify_ip_in_subnet","title":"<code>verify_ip_in_subnet(ip, subnet)</code>","text":"<p>Check if a given IP address belongs to a specified subnet.</p> <p>This function converts the provided IP address and subnet (in CIDR notation) into their respective ipaddress objects, then checks if the IP address is within the network defined by the subnet.</p> <p>Parameters:</p> Name Type Description Default <code>ip</code> <code>str</code> <p>The IP address to check (e.g., \"192.168.1.10\").</p> required <code>subnet</code> <code>str</code> <p>The subnet in CIDR notation (e.g., \"192.168.1.0/24\").</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the IP address is within the subnet, False otherwise.</p> Example <p>verify_ip_in_subnet(\"192.168.1.10\", \"192.168.1.0/24\") True verify_ip_in_subnet(\"10.0.0.1\", \"192.168.1.0/24\") False</p> Source code in <code>ures/network.py</code> <pre><code>def verify_ip_in_subnet(ip: str, subnet: str) -&gt; bool:\n    \"\"\"\n    Check if a given IP address belongs to a specified subnet.\n\n    This function converts the provided IP address and subnet (in CIDR notation)\n    into their respective ipaddress objects, then checks if the IP address is within\n    the network defined by the subnet.\n\n    Args:\n        ip (str): The IP address to check (e.g., \"192.168.1.10\").\n        subnet (str): The subnet in CIDR notation (e.g., \"192.168.1.0/24\").\n\n    Returns:\n        bool: True if the IP address is within the subnet, False otherwise.\n\n    Example:\n        &gt;&gt;&gt; verify_ip_in_subnet(\"192.168.1.10\", \"192.168.1.0/24\")\n        True\n        &gt;&gt;&gt; verify_ip_in_subnet(\"10.0.0.1\", \"192.168.1.0/24\")\n        False\n    \"\"\"\n    ip_obj = ipaddress.ip_address(ip)\n    network_obj = ipaddress.ip_network(subnet)\n    return ip_obj in network_obj\n</code></pre>"},{"location":"apis/string/","title":"String Module","text":""},{"location":"apis/string/#ures.string.capitalize_string","title":"<code>capitalize_string(string, separator=' ')</code>","text":"<p>Capitalize each word in a string using a specified separator.</p> <p>Splits the input string by the given separator, capitalizes the first letter of each part, and then joins the parts back together using the same separator.</p> <p>Parameters:</p> Name Type Description Default <code>string</code> <code>str</code> <p>The string to be capitalized.</p> required <code>separator</code> <code>str</code> <p>The separator to use for splitting and joining the string.                        Defaults to \" \".</p> <code>' '</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The capitalized string.</p> Example <p>capitalize_string(\"hello world\") 'Hello World' capitalize_string(\"john-doe\", separator=\"-\") 'John-Doe'</p> Source code in <code>ures/string.py</code> <pre><code>def capitalize_string(string: str, separator: str = \" \") -&gt; str:\n    \"\"\"\n    Capitalize each word in a string using a specified separator.\n\n    Splits the input string by the given separator, capitalizes the first letter of each part,\n    and then joins the parts back together using the same separator.\n\n    Args:\n        string (str): The string to be capitalized.\n        separator (str, optional): The separator to use for splitting and joining the string.\n                                   Defaults to \" \".\n\n    Returns:\n        str: The capitalized string.\n\n    Example:\n        &gt;&gt;&gt; capitalize_string(\"hello world\")\n        'Hello World'\n        &gt;&gt;&gt; capitalize_string(\"john-doe\", separator=\"-\")\n        'John-Doe'\n    \"\"\"\n    return separator.join([item.capitalize() for item in string.split(separator)])\n</code></pre>"},{"location":"apis/string/#ures.string.format_memory","title":"<code>format_memory(nbytes)</code>","text":"<p>Format a memory size into a human-readable string.</p> <p>Converts a memory size in bytes into a formatted string using appropriate units (B, KB, MB, or GB) with two decimal places of precision. If the provided value is None, it returns \"0 bytes\".</p> <p>Parameters:</p> Name Type Description Default <code>nbytes</code> <code>int</code> <p>The memory size in bytes.</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The memory size in a human-readable format.</p> Example <p>format_memory(1024) '1.00 KB' format_memory(1048576) '1.00 MB'</p> Source code in <code>ures/string.py</code> <pre><code>def format_memory(nbytes: int) -&gt; str:\n    \"\"\"\n    Format a memory size into a human-readable string.\n\n    Converts a memory size in bytes into a formatted string using appropriate units (B, KB, MB, or GB)\n    with two decimal places of precision. If the provided value is None, it returns \"0 bytes\".\n\n    Args:\n        nbytes (int): The memory size in bytes.\n\n    Returns:\n        str: The memory size in a human-readable format.\n\n    Example:\n        &gt;&gt;&gt; format_memory(1024)\n        '1.00 KB'\n        &gt;&gt;&gt; format_memory(1048576)\n        '1.00 MB'\n    \"\"\"\n    if nbytes is None:\n        return \"0 bytes\"\n\n    KB = 1024\n    MB = 1024 * KB\n    GB = 1024 * MB\n    if abs(nbytes) &gt;= GB:\n        return f\"{nbytes * 1.0 / GB:.2f} GB\"\n    elif abs(nbytes) &gt;= MB:\n        return f\"{nbytes * 1.0 / MB:.2f} MB\"\n    elif abs(nbytes) &gt;= KB:\n        return f\"{nbytes * 1.0 / KB:.2f} KB\"\n    else:\n        return str(nbytes) + \" B\"\n</code></pre>"},{"location":"apis/string/#ures.string.unique_id","title":"<code>unique_id()</code>","text":"<p>Generate a unique identifier.</p> <p>This function returns a unique identifier as a hexadecimal string generated from a UUID.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A unique hexadecimal identifier (e.g., \"3f8a7c2d1e9b4a6f8d0e2c1b3a5f7e9d\").</p> Example <p>uid = unique_id() len(uid) == 32 True</p> Source code in <code>ures/string.py</code> <pre><code>def unique_id() -&gt; str:\n    \"\"\"\n    Generate a unique identifier.\n\n    This function returns a unique identifier as a hexadecimal string generated from a UUID.\n\n    Returns:\n        str: A unique hexadecimal identifier (e.g., \"3f8a7c2d1e9b4a6f8d0e2c1b3a5f7e9d\").\n\n    Example:\n        &gt;&gt;&gt; uid = unique_id()\n        &gt;&gt;&gt; len(uid) == 32\n        True\n    \"\"\"\n    return uuid.uuid4().hex\n</code></pre>"},{"location":"apis/string/#ures.string.zettelkasten_id","title":"<code>zettelkasten_id()</code>","text":"<p>Generate a Zettelkasten identifier.</p> <p>This function creates a unique identifier suitable for a Zettelkasten note-taking system. It generates a UUID, then formats the hexadecimal string by taking the first 9 characters, appending a dot, and then the last 11 characters of the UUID.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A formatted unique identifier (e.g., \"abc123def.ghi45678901\").</p> Example <p>id_str = zettelkasten_id() isinstance(id_str, str) True</p> Source code in <code>ures/string.py</code> <pre><code>def zettelkasten_id() -&gt; str:\n    \"\"\"\n    Generate a Zettelkasten identifier.\n\n    This function creates a unique identifier suitable for a Zettelkasten note-taking system.\n    It generates a UUID, then formats the hexadecimal string by taking the first 9 characters,\n    appending a dot, and then the last 11 characters of the UUID.\n\n    Returns:\n        str: A formatted unique identifier (e.g., \"abc123def.ghi45678901\").\n\n    Example:\n        &gt;&gt;&gt; id_str = zettelkasten_id()\n        &gt;&gt;&gt; isinstance(id_str, str)\n        True\n    \"\"\"\n    _id = uuid.uuid4().hex\n    return f\"{_id[:9]}.{_id[-11:]}\"\n</code></pre>"},{"location":"apis/timedate/","title":"Time &amp; Date Module","text":""},{"location":"apis/timedate/#ures.timedate.datetime_converter","title":"<code>datetime_converter(time, iso8601=True, format='%Y%m%d-%H%M%S')</code>","text":"<p>Convert a datetime object to a formatted string.</p> <p>This function converts a given datetime.datetime object into a string. If 'iso8601' is True, the datetime is converted to ISO 8601 format with a trailing 'Z'. Otherwise, the datetime is formatted using the provided custom format string.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>datetime</code> <p>The datetime object to be converted.</p> required <code>iso8601</code> <code>bool</code> <p>Determines the output format. - If True, returns the time in ISO 8601 format. - If False, returns the time formatted by the 'format' parameter. Defaults to True.</p> <code>True</code> <code>format</code> <code>str</code> <p>The custom format string to use when 'iso8601' is False. Defaults to \"%Y%m%d-%H%M%S\".</p> <code>'%Y%m%d-%H%M%S'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted time string.</p> Example <p>import datetime dt = datetime.datetime(2020, 1, 1, 12, 0, 0) datetime_converter(dt, iso8601=True) '2020-01-01T12:00:00Z' datetime_converter(dt, iso8601=False, format=\"%Y/%m/%d %H:%M\") '2020/01/01 12:00'</p> Source code in <code>ures/timedate.py</code> <pre><code>def datetime_converter(\n    time: datetime.datetime, iso8601: bool = True, format: str = \"%Y%m%d-%H%M%S\"\n) -&gt; str:\n    \"\"\"\n    Convert a datetime object to a formatted string.\n\n    This function converts a given datetime.datetime object into a string. If 'iso8601' is True,\n    the datetime is converted to ISO 8601 format with a trailing 'Z'. Otherwise, the datetime is\n    formatted using the provided custom format string.\n\n    Args:\n        time (datetime.datetime): The datetime object to be converted.\n        iso8601 (bool, optional): Determines the output format.\n            - If True, returns the time in ISO 8601 format.\n            - If False, returns the time formatted by the 'format' parameter.\n            Defaults to True.\n        format (str, optional): The custom format string to use when 'iso8601' is False.\n            Defaults to \"%Y%m%d-%H%M%S\".\n\n    Returns:\n        str: The formatted time string.\n\n    Example:\n        &gt;&gt;&gt; import datetime\n        &gt;&gt;&gt; dt = datetime.datetime(2020, 1, 1, 12, 0, 0)\n        &gt;&gt;&gt; datetime_converter(dt, iso8601=True)\n        '2020-01-01T12:00:00Z'\n        &gt;&gt;&gt; datetime_converter(dt, iso8601=False, format=\"%Y/%m/%d %H:%M\")\n        '2020/01/01 12:00'\n    \"\"\"\n    if iso8601:\n        return time.isoformat() + \"Z\"\n    else:\n        return time.strftime(format)\n</code></pre>"},{"location":"apis/timedate/#ures.timedate.time_now","title":"<code>time_now(iso8601=True, format='%Y%m%d-%H%M%S')</code>","text":"<p>Retrieve the current time as a formatted string.</p> <p>This function gets the current time using the system clock and converts it into a string. The output can either be in ISO 8601 format (with a trailing 'Z') or a custom format based on the provided format string.</p> <p>Parameters:</p> Name Type Description Default <code>iso8601</code> <code>bool</code> <p>Determines the output format. - If True, returns the time in ISO 8601 format. - If False, returns the time formatted by the 'format' parameter. Defaults to True.</p> <code>True</code> <code>format</code> <code>str</code> <p>The custom format string to use when 'iso8601' is False. Defaults to \"%Y%m%d-%H%M%S\".</p> <code>'%Y%m%d-%H%M%S'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The current time as a formatted string.</p> Example <p>current_time = time_now(iso8601=True) current_time.endswith(\"Z\") True time_now(iso8601=False, format=\"%H:%M:%S\") '14:35:22'</p> Source code in <code>ures/timedate.py</code> <pre><code>def time_now(iso8601: bool = True, format: str = \"%Y%m%d-%H%M%S\") -&gt; str:\n    \"\"\"\n    Retrieve the current time as a formatted string.\n\n    This function gets the current time using the system clock and converts it into a string.\n    The output can either be in ISO 8601 format (with a trailing 'Z') or a custom format based on\n    the provided format string.\n\n    Args:\n        iso8601 (bool, optional): Determines the output format.\n            - If True, returns the time in ISO 8601 format.\n            - If False, returns the time formatted by the 'format' parameter.\n            Defaults to True.\n        format (str, optional): The custom format string to use when 'iso8601' is False.\n            Defaults to \"%Y%m%d-%H%M%S\".\n\n    Returns:\n        str: The current time as a formatted string.\n\n    Example:\n        &gt;&gt;&gt; current_time = time_now(iso8601=True)\n        &gt;&gt;&gt; current_time.endswith(\"Z\")\n        True\n        &gt;&gt;&gt; time_now(iso8601=False, format=\"%H:%M:%S\")\n        '14:35:22'\n    \"\"\"\n    return datetime_converter(\n        datetime.datetime.now(datetime.UTC), iso8601=iso8601, format=format\n    )\n</code></pre>"},{"location":"apis/timedate/#ures.timedate.timestamp_converter","title":"<code>timestamp_converter(timestamp, iso8601=True, format='%Y%m%d-%H%M%S')</code>","text":"<p>Convert a Unix timestamp to a formatted time string.</p> <p>This function converts a Unix timestamp (number of seconds since the epoch) into a human-readable string. It utilizes the 'datetime_converter' function to perform the conversion, allowing the output to be either in ISO 8601 format or in a custom format.</p> <p>Parameters:</p> Name Type Description Default <code>timestamp</code> <code>int</code> <p>The Unix timestamp to be converted.</p> required <code>iso8601</code> <code>bool</code> <p>Determines the output format. - If True, returns the time in ISO 8601 format. - If False, returns the time formatted by the 'format' parameter. Defaults to True.</p> <code>True</code> <code>format</code> <code>str</code> <p>The custom format string to use when 'iso8601' is False. Defaults to \"%Y%m%d-%H%M%S\".</p> <code>'%Y%m%d-%H%M%S'</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The formatted time string.</p> Example Source code in <code>ures/timedate.py</code> <pre><code>def timestamp_converter(\n    timestamp: int, iso8601: bool = True, format: str = \"%Y%m%d-%H%M%S\"\n) -&gt; str:\n    \"\"\"\n    Convert a Unix timestamp to a formatted time string.\n\n    This function converts a Unix timestamp (number of seconds since the epoch) into a human-readable\n    string. It utilizes the 'datetime_converter' function to perform the conversion, allowing the output\n    to be either in ISO 8601 format or in a custom format.\n\n    Args:\n        timestamp (int): The Unix timestamp to be converted.\n        iso8601 (bool, optional): Determines the output format.\n            - If True, returns the time in ISO 8601 format.\n            - If False, returns the time formatted by the 'format' parameter.\n            Defaults to True.\n        format (str, optional): The custom format string to use when 'iso8601' is False.\n            Defaults to \"%Y%m%d-%H%M%S\".\n\n    Returns:\n        str: The formatted time string.\n\n    Example:\n        &gt;&gt;&gt; # Unix timestamp for 2020-01-01 12:00:00\n        &gt;&gt;&gt; timestamp_converter(1577880000, iso8601=True)\n        '2020-01-01T12:00:00Z'\n        &gt;&gt;&gt; timestamp_converter(1577880000, iso8601=False, format=\"%d/%m/%Y %H:%M\")\n        '01/01/2020 12:00'\n    \"\"\"\n    return datetime_converter(\n        datetime.datetime.fromtimestamp(timestamp),\n        iso8601=iso8601,\n        format=format,\n    )\n</code></pre>"},{"location":"apis/timedate/#ures.timedate.timestamp_converter--unix-timestamp-for-2020-01-01-120000","title":"Unix timestamp for 2020-01-01 12:00:00","text":"<p>timestamp_converter(1577880000, iso8601=True) '2020-01-01T12:00:00Z' timestamp_converter(1577880000, iso8601=False, format=\"%d/%m/%Y %H:%M\") '01/01/2020 12:00'</p>"},{"location":"apis/data_structure/bi_directional_links/","title":"Data Structure - Bi-Directional Links","text":""},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection","title":"<code>BiDirection</code>","text":"Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>class BiDirection:\n    def __init__(self, value: Any):\n        \"\"\"\n        Create a bi-directional linked node.\n\n        Initializes a node with the given value and sets its previous and next pointers to itself,\n        forming a circular structure when isolated.\n\n        Args:\n            value (Any): The value to store in the node.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(\"A\")\n            &gt;&gt;&gt; node.value\n            'A'\n            &gt;&gt;&gt; node.prev is node\n            True\n            &gt;&gt;&gt; node.next is node\n            True\n        \"\"\"\n        self._prev: Optional[BiDirection] = self\n        self._next: Optional[BiDirection] = self\n        self._value: Any = value\n        self._id = uuid.uuid4().hex\n\n    @property\n    def prev(self) -&gt; BiDirection:\n        \"\"\"\n        Get the previous node in the linked structure.\n\n        Returns:\n            BiDirection: The previous node.\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(\"A\")\n            &gt;&gt;&gt; node.prev is node\n            True\n        \"\"\"\n        return self._prev\n\n    @property\n    def next(self) -&gt; BiDirection:\n        \"\"\"\n        Get the next node in the linked structure.\n\n        Returns:\n            BiDirection: The next node.\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(\"A\")\n            &gt;&gt;&gt; node.next is node\n            True\n        \"\"\"\n        return self._next\n\n    @property\n    def value(self) -&gt; Any:\n        \"\"\"\n        Retrieve the value stored in the node.\n\n        Returns:\n            Any: The node's value.\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(123)\n            &gt;&gt;&gt; node.value\n            123\n        \"\"\"\n        return self._value\n\n    @property\n    def id(self) -&gt; str:\n        \"\"\"\n        Get the unique identifier of the node.\n\n        Returns:\n            str: A hexadecimal string representing the node's unique ID.\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(\"A\")\n            &gt;&gt;&gt; isinstance(node.id, str)\n            True\n        \"\"\"\n        return self._id\n\n    def insert_after(self, node: BiDirection) -&gt; None:\n        \"\"\"\n        Insert a node immediately after the current node.\n\n        Adjusts pointers so that the new node is placed between the current node and its next node.\n\n        Args:\n            node (BiDirection): The node to be inserted after the current node.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; node1 = BiDirection(\"A\")\n            &gt;&gt;&gt; node2 = BiDirection(\"B\")\n            &gt;&gt;&gt; node1.insert_after(node2)\n            &gt;&gt;&gt; node1.next is node2\n            True\n            &gt;&gt;&gt; node2.prev is node1\n            True\n        \"\"\"\n        node._prev = self\n        node._next = self._next\n        self._next._prev = node\n        self._next = node\n\n    def insert_before(self, node: BiDirection) -&gt; None:\n        \"\"\"\n        Insert a node immediately before the current node.\n\n        Adjusts pointers so that the new node is placed between the current node's previous node and the current node.\n\n        Args:\n            node (BiDirection): The node to be inserted before the current node.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; node1 = BiDirection(\"A\")\n            &gt;&gt;&gt; node2 = BiDirection(\"B\")\n            &gt;&gt;&gt; node1.insert_before(node2)\n            &gt;&gt;&gt; node1.prev is node2\n            True\n            &gt;&gt;&gt; node2.next is node1\n            True\n        \"\"\"\n        node._prev = self._prev\n        node._next = self\n        self._prev._next = node\n        self._prev = node\n\n    def remove(self) -&gt; None:\n        \"\"\"\n        Remove the current node from the linked structure.\n\n        Adjusts the previous and next nodes to bypass the current node and resets the current node's\n        pointers to point to itself.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; node1 = BiDirection(\"A\")\n            &gt;&gt;&gt; node2 = BiDirection(\"B\")\n            &gt;&gt;&gt; node1.insert_after(node2)\n            &gt;&gt;&gt; node2.remove()\n            &gt;&gt;&gt; node1.next is node1\n            True\n        \"\"\"\n        self._prev._next = self._next\n        self._next._prev = self._prev\n        self._prev = self\n        self._next = self\n\n    def search(self, value: Any) -&gt; Optional[BiDirection]:\n        \"\"\"\n        Search for a node with the specified value in the linked structure.\n\n        Starting from the current node, traverse through the chain until the value is found or the search\n        returns to the starting node.\n\n        Args:\n            value (Any): The value to search for.\n\n        Returns:\n            Optional[BiDirection]: The node with the matching value, or None if not found.\n\n        Example:\n            &gt;&gt;&gt; node1 = BiDirection(\"A\")\n            &gt;&gt;&gt; node2 = BiDirection(\"B\")\n            &gt;&gt;&gt; node3 = BiDirection(\"C\")\n            &gt;&gt;&gt; node1.insert_after(node2)\n            &gt;&gt;&gt; node2.insert_after(node3)\n            &gt;&gt;&gt; found = node1.search(\"C\")\n            &gt;&gt;&gt; found.value\n            'C'\n            &gt;&gt;&gt; not_found = node1.search(\"D\")\n            &gt;&gt;&gt; not_found is None\n            True\n        \"\"\"\n        node = self\n        while node.value != value and node.next != self:\n            node = node.next\n        return node if node.value == value else None\n\n    def __eq__(self, other: BiDirection) -&gt; bool:\n        \"\"\"\n        Check equality between two nodes based on their unique IDs.\n\n        Args:\n            other (BiDirection): Another node to compare with.\n\n        Returns:\n            bool: True if both nodes have the same unique ID, False otherwise.\n\n        Example:\n            &gt;&gt;&gt; node1 = BiDirection(\"A\")\n            &gt;&gt;&gt; node2 = BiDirection(\"A\")\n            &gt;&gt;&gt; node1 == node1\n            True\n            &gt;&gt;&gt; node1 == node2\n            False\n        \"\"\"\n        return self.id == other.id\n\n    def __str__(self) -&gt; str:\n        \"\"\"\n        Get the string representation of the node.\n\n        Returns:\n            str: A string representing the node's value.\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(\"Hello\")\n            &gt;&gt;&gt; str(node)\n            'Hello'\n        \"\"\"\n        return str(self.value)\n\n    def __repr__(self) -&gt; str:\n        \"\"\"\n        Get a detailed string representation of the node.\n\n        Returns:\n            str: A string in the format \"BiDirection(&lt;value&gt;)\" representing the node.\n\n        Example:\n            &gt;&gt;&gt; node = BiDirection(\"World\")\n            &gt;&gt;&gt; repr(node)\n            'BiDirection(World)'\n        \"\"\"\n        return f\"BiDirection({self.value})\"\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.id","title":"<code>id</code>  <code>property</code>","text":"<p>Get the unique identifier of the node.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A hexadecimal string representing the node's unique ID.</p> Example <p>node = BiDirection(\"A\") isinstance(node.id, str) True</p>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.next","title":"<code>next</code>  <code>property</code>","text":"<p>Get the next node in the linked structure.</p> <p>Returns:</p> Name Type Description <code>BiDirection</code> <code>BiDirection</code> <p>The next node.</p> Example <p>node = BiDirection(\"A\") node.next is node True</p>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.prev","title":"<code>prev</code>  <code>property</code>","text":"<p>Get the previous node in the linked structure.</p> <p>Returns:</p> Name Type Description <code>BiDirection</code> <code>BiDirection</code> <p>The previous node.</p> Example <p>node = BiDirection(\"A\") node.prev is node True</p>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.value","title":"<code>value</code>  <code>property</code>","text":"<p>Retrieve the value stored in the node.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The node's value.</p> Example <p>node = BiDirection(123) node.value 123</p>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.__eq__","title":"<code>__eq__(other)</code>","text":"<p>Check equality between two nodes based on their unique IDs.</p> <p>Parameters:</p> Name Type Description Default <code>other</code> <code>BiDirection</code> <p>Another node to compare with.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if both nodes have the same unique ID, False otherwise.</p> Example <p>node1 = BiDirection(\"A\") node2 = BiDirection(\"A\") node1 == node1 True node1 == node2 False</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def __eq__(self, other: BiDirection) -&gt; bool:\n    \"\"\"\n    Check equality between two nodes based on their unique IDs.\n\n    Args:\n        other (BiDirection): Another node to compare with.\n\n    Returns:\n        bool: True if both nodes have the same unique ID, False otherwise.\n\n    Example:\n        &gt;&gt;&gt; node1 = BiDirection(\"A\")\n        &gt;&gt;&gt; node2 = BiDirection(\"A\")\n        &gt;&gt;&gt; node1 == node1\n        True\n        &gt;&gt;&gt; node1 == node2\n        False\n    \"\"\"\n    return self.id == other.id\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.__init__","title":"<code>__init__(value)</code>","text":"<p>Create a bi-directional linked node.</p> <p>Initializes a node with the given value and sets its previous and next pointers to itself, forming a circular structure when isolated.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to store in the node.</p> required <p>Returns:</p> Type Description <p>None</p> Example <p>node = BiDirection(\"A\") node.value 'A' node.prev is node True node.next is node True</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def __init__(self, value: Any):\n    \"\"\"\n    Create a bi-directional linked node.\n\n    Initializes a node with the given value and sets its previous and next pointers to itself,\n    forming a circular structure when isolated.\n\n    Args:\n        value (Any): The value to store in the node.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; node = BiDirection(\"A\")\n        &gt;&gt;&gt; node.value\n        'A'\n        &gt;&gt;&gt; node.prev is node\n        True\n        &gt;&gt;&gt; node.next is node\n        True\n    \"\"\"\n    self._prev: Optional[BiDirection] = self\n    self._next: Optional[BiDirection] = self\n    self._value: Any = value\n    self._id = uuid.uuid4().hex\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.__repr__","title":"<code>__repr__()</code>","text":"<p>Get a detailed string representation of the node.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string in the format \"BiDirection()\" representing the node. Example <p>node = BiDirection(\"World\") repr(node) 'BiDirection(World)'</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"\n    Get a detailed string representation of the node.\n\n    Returns:\n        str: A string in the format \"BiDirection(&lt;value&gt;)\" representing the node.\n\n    Example:\n        &gt;&gt;&gt; node = BiDirection(\"World\")\n        &gt;&gt;&gt; repr(node)\n        'BiDirection(World)'\n    \"\"\"\n    return f\"BiDirection({self.value})\"\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.__str__","title":"<code>__str__()</code>","text":"<p>Get the string representation of the node.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representing the node's value.</p> Example <p>node = BiDirection(\"Hello\") str(node) 'Hello'</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def __str__(self) -&gt; str:\n    \"\"\"\n    Get the string representation of the node.\n\n    Returns:\n        str: A string representing the node's value.\n\n    Example:\n        &gt;&gt;&gt; node = BiDirection(\"Hello\")\n        &gt;&gt;&gt; str(node)\n        'Hello'\n    \"\"\"\n    return str(self.value)\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.insert_after","title":"<code>insert_after(node)</code>","text":"<p>Insert a node immediately after the current node.</p> <p>Adjusts pointers so that the new node is placed between the current node and its next node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>BiDirection</code> <p>The node to be inserted after the current node.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>node1 = BiDirection(\"A\") node2 = BiDirection(\"B\") node1.insert_after(node2) node1.next is node2 True node2.prev is node1 True</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def insert_after(self, node: BiDirection) -&gt; None:\n    \"\"\"\n    Insert a node immediately after the current node.\n\n    Adjusts pointers so that the new node is placed between the current node and its next node.\n\n    Args:\n        node (BiDirection): The node to be inserted after the current node.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; node1 = BiDirection(\"A\")\n        &gt;&gt;&gt; node2 = BiDirection(\"B\")\n        &gt;&gt;&gt; node1.insert_after(node2)\n        &gt;&gt;&gt; node1.next is node2\n        True\n        &gt;&gt;&gt; node2.prev is node1\n        True\n    \"\"\"\n    node._prev = self\n    node._next = self._next\n    self._next._prev = node\n    self._next = node\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.insert_before","title":"<code>insert_before(node)</code>","text":"<p>Insert a node immediately before the current node.</p> <p>Adjusts pointers so that the new node is placed between the current node's previous node and the current node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>BiDirection</code> <p>The node to be inserted before the current node.</p> required <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>node1 = BiDirection(\"A\") node2 = BiDirection(\"B\") node1.insert_before(node2) node1.prev is node2 True node2.next is node1 True</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def insert_before(self, node: BiDirection) -&gt; None:\n    \"\"\"\n    Insert a node immediately before the current node.\n\n    Adjusts pointers so that the new node is placed between the current node's previous node and the current node.\n\n    Args:\n        node (BiDirection): The node to be inserted before the current node.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; node1 = BiDirection(\"A\")\n        &gt;&gt;&gt; node2 = BiDirection(\"B\")\n        &gt;&gt;&gt; node1.insert_before(node2)\n        &gt;&gt;&gt; node1.prev is node2\n        True\n        &gt;&gt;&gt; node2.next is node1\n        True\n    \"\"\"\n    node._prev = self._prev\n    node._next = self\n    self._prev._next = node\n    self._prev = node\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.remove","title":"<code>remove()</code>","text":"<p>Remove the current node from the linked structure.</p> <p>Adjusts the previous and next nodes to bypass the current node and resets the current node's pointers to point to itself.</p> <p>Returns:</p> Type Description <code>None</code> <p>None</p> Example <p>node1 = BiDirection(\"A\") node2 = BiDirection(\"B\") node1.insert_after(node2) node2.remove() node1.next is node1 True</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def remove(self) -&gt; None:\n    \"\"\"\n    Remove the current node from the linked structure.\n\n    Adjusts the previous and next nodes to bypass the current node and resets the current node's\n    pointers to point to itself.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; node1 = BiDirection(\"A\")\n        &gt;&gt;&gt; node2 = BiDirection(\"B\")\n        &gt;&gt;&gt; node1.insert_after(node2)\n        &gt;&gt;&gt; node2.remove()\n        &gt;&gt;&gt; node1.next is node1\n        True\n    \"\"\"\n    self._prev._next = self._next\n    self._next._prev = self._prev\n    self._prev = self\n    self._next = self\n</code></pre>"},{"location":"apis/data_structure/bi_directional_links/#ures.data_structure.bi_directional_links.BiDirection.search","title":"<code>search(value)</code>","text":"<p>Search for a node with the specified value in the linked structure.</p> <p>Starting from the current node, traverse through the chain until the value is found or the search returns to the starting node.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to search for.</p> required <p>Returns:</p> Type Description <code>Optional[BiDirection]</code> <p>Optional[BiDirection]: The node with the matching value, or None if not found.</p> Example <p>node1 = BiDirection(\"A\") node2 = BiDirection(\"B\") node3 = BiDirection(\"C\") node1.insert_after(node2) node2.insert_after(node3) found = node1.search(\"C\") found.value 'C' not_found = node1.search(\"D\") not_found is None True</p> Source code in <code>ures/data_structure/bi_directional_links.py</code> <pre><code>def search(self, value: Any) -&gt; Optional[BiDirection]:\n    \"\"\"\n    Search for a node with the specified value in the linked structure.\n\n    Starting from the current node, traverse through the chain until the value is found or the search\n    returns to the starting node.\n\n    Args:\n        value (Any): The value to search for.\n\n    Returns:\n        Optional[BiDirection]: The node with the matching value, or None if not found.\n\n    Example:\n        &gt;&gt;&gt; node1 = BiDirection(\"A\")\n        &gt;&gt;&gt; node2 = BiDirection(\"B\")\n        &gt;&gt;&gt; node3 = BiDirection(\"C\")\n        &gt;&gt;&gt; node1.insert_after(node2)\n        &gt;&gt;&gt; node2.insert_after(node3)\n        &gt;&gt;&gt; found = node1.search(\"C\")\n        &gt;&gt;&gt; found.value\n        'C'\n        &gt;&gt;&gt; not_found = node1.search(\"D\")\n        &gt;&gt;&gt; not_found is None\n        True\n    \"\"\"\n    node = self\n    while node.value != value and node.next != self:\n        node = node.next\n    return node if node.value == value else None\n</code></pre>"},{"location":"apis/data_structure/tree/","title":"Data Structure - Tree","text":""},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode","title":"<code>TreeNode</code>","text":"Source code in <code>ures/data_structure/tree.py</code> <pre><code>class TreeNode:\n    def __init__(self, value: Any):\n        \"\"\"\n        Initialize a TreeNode instance.\n\n        Args:\n            value (Any): The value to be stored in the node.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; node = TreeNode(\"root\")\n            &gt;&gt;&gt; node.value\n            'root'\n        \"\"\"\n        self._parent: Optional[TreeNode] = None\n        self._children: Dict[AnyStr, TreeNode] = {}\n        self._value: Any = value\n        self._id = uuid.uuid4().hex\n\n    @property\n    def parent(self) -&gt; Optional[TreeNode]:\n        \"\"\"\n        Get the parent node of this TreeNode.\n\n        Returns:\n            Optional[TreeNode]: The parent node if it exists; otherwise, None.\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child = TreeNode(\"child\")\n            &gt;&gt;&gt; child.set_parent(root)\n            &gt;&gt;&gt; child.parent is root\n            True\n        \"\"\"\n        return self._parent\n\n    @property\n    def children(self) -&gt; Dict[AnyStr, TreeNode]:\n        \"\"\"\n        Get the dictionary of child nodes.\n\n        Returns:\n            Dict[AnyStr, TreeNode]: A dictionary mapping each child's unique ID to its TreeNode instance.\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child = TreeNode(\"child\")\n            &gt;&gt;&gt; root.add_child(child)\n            &gt;&gt;&gt; list(root.children.values())[0].value\n            'child'\n        \"\"\"\n        return self._children\n\n    @property\n    def is_leaf(self) -&gt; bool:\n        \"\"\"\n        Determine if the node is a leaf (i.e., has no children).\n\n        Returns:\n            bool: True if the node has no children; otherwise, False.\n\n        Example:\n            &gt;&gt;&gt; node = TreeNode(\"leaf\")\n            &gt;&gt;&gt; node.is_leaf\n            True\n        \"\"\"\n        return len(self.children) == 0\n\n    @property\n    def value(self) -&gt; Any:\n        \"\"\"\n        Retrieve the value stored in the node.\n\n        Returns:\n            Any: The value of the node.\n\n        Example:\n            &gt;&gt;&gt; node = TreeNode(10)\n            &gt;&gt;&gt; node.value\n            10\n        \"\"\"\n        return self._value\n\n    @property\n    def id(self) -&gt; str:\n        \"\"\"\n        Get the unique identifier of the node.\n\n        Returns:\n            str: A unique hexadecimal string identifier for the node.\n\n        Example:\n            &gt;&gt;&gt; node = TreeNode(\"example\")\n            &gt;&gt;&gt; isinstance(node.id, str)\n            True\n        \"\"\"\n        return self._id\n\n    def add_child(self, child: TreeNode):\n        \"\"\"\n        Add a child node to the current node.\n\n        This method adds the given child to the node's children dictionary (using the child's ID as key)\n        and sets the current node as the parent of the child.\n\n        Args:\n            child (TreeNode): The child node to add.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child = TreeNode(\"child\")\n            &gt;&gt;&gt; root.add_child(child)\n            &gt;&gt;&gt; child.parent is root\n            True\n        \"\"\"\n        if child.id not in self.children.keys():\n            self._children[child.id] = child\n            child.set_parent(self)\n\n    def remove_child(self, child: TreeNode):\n        \"\"\"\n        Remove a child node from the current node.\n\n        This method removes the specified child node from the current node's children and clears the\n        child's parent reference.\n\n        Args:\n            child (TreeNode): The child node to remove.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child = TreeNode(\"child\")\n            &gt;&gt;&gt; root.add_child(child)\n            &gt;&gt;&gt; root.remove_child(child)\n            &gt;&gt;&gt; child.parent is None\n            True\n        \"\"\"\n        if child.id in self.children.keys():\n            self._children.pop(child.id)\n            child.set_parent(None)\n\n    def set_parent(self, parent: Optional[TreeNode]):\n        \"\"\"\n        Set the parent of the current node.\n\n        If the node already has a parent, it will be removed from that parent's children before setting\n        the new parent.\n\n        Args:\n            parent (Optional[TreeNode]): The new parent node. If None, the node will have no parent.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child = TreeNode(\"child\")\n            &gt;&gt;&gt; child.set_parent(root)\n            &gt;&gt;&gt; child.parent is root\n            True\n        \"\"\"\n        if parent is not None:\n            if isinstance(self.parent, TreeNode):\n                self.parent.remove_child(self)\n        self._parent = parent\n\n    def backward_stack(self) -&gt; Iterator[TreeNode]:\n        \"\"\"\n        Generate an iterator for the path from the current node to the root.\n\n        The iterator yields nodes starting with the current node and then each successive parent until\n        no further parent exists.\n\n        Returns:\n            Iterator[TreeNode]: An iterator over the nodes from the current node up to the root.\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child = TreeNode(\"child\")\n            &gt;&gt;&gt; child.set_parent(root)\n            &gt;&gt;&gt; [node.value for node in child.backward_stack()]\n            ['child', 'root']\n        \"\"\"\n        current = self\n        while current is not None:\n            yield current\n            current = current.parent\n\n    def forward_stack(self, **kwargs) -&gt; List[List[Any]]:\n        \"\"\"\n        Get all forward paths from the current node to each leaf node.\n\n        This method performs a depth-first search (DFS) to compute every possible path from the current node\n        to all leaf nodes. If an optional attribute key is provided via kwargs, the method returns that attribute\n        for each node in the path; otherwise, it returns the node itself.\n\n        Keyword Args:\n            attr (str, optional): The attribute name to extract from each node. Defaults to None.\n\n        Returns:\n            List[List[Any]]: A list of paths, where each path is a list of nodes or attribute values from the\n                             current node to a leaf node.\n\n        Example:\n            &gt;&gt;&gt; root = TreeNode(\"root\")\n            &gt;&gt;&gt; child1 = TreeNode(\"child1\")\n            &gt;&gt;&gt; child2 = TreeNode(\"child2\")\n            &gt;&gt;&gt; root.add_child(child1)\n            &gt;&gt;&gt; root.add_child(child2)\n            &gt;&gt;&gt; paths = root.forward_stack(attr=\"value\")\n            &gt;&gt;&gt; sorted(paths)\n            [['child1', 'root'], ['child2', 'root']]  # Order may vary\n        \"\"\"\n        all_paths = []\n        self._dfs(self, [], all_paths, **kwargs)\n        return all_paths\n\n    def _dfs(self, node: TreeNode, current_path: list, all_paths: list, **kwargs):\n        \"\"\"\n        Recursively perform depth-first search (DFS) to find all paths from the given node to leaf nodes.\n\n        This internal helper method accumulates paths by traversing each branch of the tree.\n        If a keyword argument 'attr' is provided, it appends the value of that attribute for each node.\n\n        Args:\n            node (TreeNode): The current node in the DFS traversal.\n            current_path (list): The path taken to reach the current node.\n            all_paths (list): A list to store all complete paths.\n            **kwargs: Optional keyword arguments.\n                - attr (str, optional): The attribute name to use for each node in the path.\n\n        Returns:\n            None\n\n        Example:\n            &gt;&gt;&gt; # Typically used internally by forward_stack.\n            ... pass\n        \"\"\"\n        assert isinstance(node, TreeNode)\n        _attr = kwargs.get(\"attr\", None)\n        _key = node if _attr is None else getattr(node, _attr)\n        current_path.append(_key)\n\n        if not node.children:\n            all_paths.append(list(current_path))\n        else:\n            for child in node.children.values():\n                self._dfs(child, current_path, all_paths, **kwargs)\n        current_path.pop()\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.children","title":"<code>children</code>  <code>property</code>","text":"<p>Get the dictionary of child nodes.</p> <p>Returns:</p> Type Description <code>Dict[AnyStr, TreeNode]</code> <p>Dict[AnyStr, TreeNode]: A dictionary mapping each child's unique ID to its TreeNode instance.</p> Example <p>root = TreeNode(\"root\") child = TreeNode(\"child\") root.add_child(child) list(root.children.values())[0].value 'child'</p>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.id","title":"<code>id</code>  <code>property</code>","text":"<p>Get the unique identifier of the node.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A unique hexadecimal string identifier for the node.</p> Example <p>node = TreeNode(\"example\") isinstance(node.id, str) True</p>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.is_leaf","title":"<code>is_leaf</code>  <code>property</code>","text":"<p>Determine if the node is a leaf (i.e., has no children).</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>True if the node has no children; otherwise, False.</p> Example <p>node = TreeNode(\"leaf\") node.is_leaf True</p>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.parent","title":"<code>parent</code>  <code>property</code>","text":"<p>Get the parent node of this TreeNode.</p> <p>Returns:</p> Type Description <code>Optional[TreeNode]</code> <p>Optional[TreeNode]: The parent node if it exists; otherwise, None.</p> Example <p>root = TreeNode(\"root\") child = TreeNode(\"child\") child.set_parent(root) child.parent is root True</p>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.value","title":"<code>value</code>  <code>property</code>","text":"<p>Retrieve the value stored in the node.</p> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The value of the node.</p> Example <p>node = TreeNode(10) node.value 10</p>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.__init__","title":"<code>__init__(value)</code>","text":"<p>Initialize a TreeNode instance.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>Any</code> <p>The value to be stored in the node.</p> required <p>Returns:</p> Type Description <p>None</p> Example <p>node = TreeNode(\"root\") node.value 'root'</p> Source code in <code>ures/data_structure/tree.py</code> <pre><code>def __init__(self, value: Any):\n    \"\"\"\n    Initialize a TreeNode instance.\n\n    Args:\n        value (Any): The value to be stored in the node.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; node = TreeNode(\"root\")\n        &gt;&gt;&gt; node.value\n        'root'\n    \"\"\"\n    self._parent: Optional[TreeNode] = None\n    self._children: Dict[AnyStr, TreeNode] = {}\n    self._value: Any = value\n    self._id = uuid.uuid4().hex\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode._dfs","title":"<code>_dfs(node, current_path, all_paths, **kwargs)</code>","text":"<p>Recursively perform depth-first search (DFS) to find all paths from the given node to leaf nodes.</p> <p>This internal helper method accumulates paths by traversing each branch of the tree. If a keyword argument 'attr' is provided, it appends the value of that attribute for each node.</p> <p>Parameters:</p> Name Type Description Default <code>node</code> <code>TreeNode</code> <p>The current node in the DFS traversal.</p> required <code>current_path</code> <code>list</code> <p>The path taken to reach the current node.</p> required <code>all_paths</code> <code>list</code> <p>A list to store all complete paths.</p> required <code>**kwargs</code> <p>Optional keyword arguments. - attr (str, optional): The attribute name to use for each node in the path.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Example Source code in <code>ures/data_structure/tree.py</code> <pre><code>def _dfs(self, node: TreeNode, current_path: list, all_paths: list, **kwargs):\n    \"\"\"\n    Recursively perform depth-first search (DFS) to find all paths from the given node to leaf nodes.\n\n    This internal helper method accumulates paths by traversing each branch of the tree.\n    If a keyword argument 'attr' is provided, it appends the value of that attribute for each node.\n\n    Args:\n        node (TreeNode): The current node in the DFS traversal.\n        current_path (list): The path taken to reach the current node.\n        all_paths (list): A list to store all complete paths.\n        **kwargs: Optional keyword arguments.\n            - attr (str, optional): The attribute name to use for each node in the path.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; # Typically used internally by forward_stack.\n        ... pass\n    \"\"\"\n    assert isinstance(node, TreeNode)\n    _attr = kwargs.get(\"attr\", None)\n    _key = node if _attr is None else getattr(node, _attr)\n    current_path.append(_key)\n\n    if not node.children:\n        all_paths.append(list(current_path))\n    else:\n        for child in node.children.values():\n            self._dfs(child, current_path, all_paths, **kwargs)\n    current_path.pop()\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode._dfs--typically-used-internally-by-forward_stack","title":"Typically used internally by forward_stack.","text":"<p>... pass</p>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.add_child","title":"<code>add_child(child)</code>","text":"<p>Add a child node to the current node.</p> <p>This method adds the given child to the node's children dictionary (using the child's ID as key) and sets the current node as the parent of the child.</p> <p>Parameters:</p> Name Type Description Default <code>child</code> <code>TreeNode</code> <p>The child node to add.</p> required <p>Returns:</p> Type Description <p>None</p> Example <p>root = TreeNode(\"root\") child = TreeNode(\"child\") root.add_child(child) child.parent is root True</p> Source code in <code>ures/data_structure/tree.py</code> <pre><code>def add_child(self, child: TreeNode):\n    \"\"\"\n    Add a child node to the current node.\n\n    This method adds the given child to the node's children dictionary (using the child's ID as key)\n    and sets the current node as the parent of the child.\n\n    Args:\n        child (TreeNode): The child node to add.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; root = TreeNode(\"root\")\n        &gt;&gt;&gt; child = TreeNode(\"child\")\n        &gt;&gt;&gt; root.add_child(child)\n        &gt;&gt;&gt; child.parent is root\n        True\n    \"\"\"\n    if child.id not in self.children.keys():\n        self._children[child.id] = child\n        child.set_parent(self)\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.backward_stack","title":"<code>backward_stack()</code>","text":"<p>Generate an iterator for the path from the current node to the root.</p> <p>The iterator yields nodes starting with the current node and then each successive parent until no further parent exists.</p> <p>Returns:</p> Type Description <code>Iterator[TreeNode]</code> <p>Iterator[TreeNode]: An iterator over the nodes from the current node up to the root.</p> Example <p>root = TreeNode(\"root\") child = TreeNode(\"child\") child.set_parent(root) node.value for node in child.backward_stack()</p> Source code in <code>ures/data_structure/tree.py</code> <pre><code>def backward_stack(self) -&gt; Iterator[TreeNode]:\n    \"\"\"\n    Generate an iterator for the path from the current node to the root.\n\n    The iterator yields nodes starting with the current node and then each successive parent until\n    no further parent exists.\n\n    Returns:\n        Iterator[TreeNode]: An iterator over the nodes from the current node up to the root.\n\n    Example:\n        &gt;&gt;&gt; root = TreeNode(\"root\")\n        &gt;&gt;&gt; child = TreeNode(\"child\")\n        &gt;&gt;&gt; child.set_parent(root)\n        &gt;&gt;&gt; [node.value for node in child.backward_stack()]\n        ['child', 'root']\n    \"\"\"\n    current = self\n    while current is not None:\n        yield current\n        current = current.parent\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.forward_stack","title":"<code>forward_stack(**kwargs)</code>","text":"<p>Get all forward paths from the current node to each leaf node.</p> <p>This method performs a depth-first search (DFS) to compute every possible path from the current node to all leaf nodes. If an optional attribute key is provided via kwargs, the method returns that attribute for each node in the path; otherwise, it returns the node itself.</p> <p>Other Parameters:</p> Name Type Description <code>attr</code> <code>str</code> <p>The attribute name to extract from each node. Defaults to None.</p> <p>Returns:</p> Type Description <code>List[List[Any]]</code> <p>List[List[Any]]: A list of paths, where each path is a list of nodes or attribute values from the              current node to a leaf node.</p> Example <p>root = TreeNode(\"root\") child1 = TreeNode(\"child1\") child2 = TreeNode(\"child2\") root.add_child(child1) root.add_child(child2) paths = root.forward_stack(attr=\"value\") sorted(paths) [['child1', 'root'], ['child2', 'root']]  # Order may vary</p> Source code in <code>ures/data_structure/tree.py</code> <pre><code>def forward_stack(self, **kwargs) -&gt; List[List[Any]]:\n    \"\"\"\n    Get all forward paths from the current node to each leaf node.\n\n    This method performs a depth-first search (DFS) to compute every possible path from the current node\n    to all leaf nodes. If an optional attribute key is provided via kwargs, the method returns that attribute\n    for each node in the path; otherwise, it returns the node itself.\n\n    Keyword Args:\n        attr (str, optional): The attribute name to extract from each node. Defaults to None.\n\n    Returns:\n        List[List[Any]]: A list of paths, where each path is a list of nodes or attribute values from the\n                         current node to a leaf node.\n\n    Example:\n        &gt;&gt;&gt; root = TreeNode(\"root\")\n        &gt;&gt;&gt; child1 = TreeNode(\"child1\")\n        &gt;&gt;&gt; child2 = TreeNode(\"child2\")\n        &gt;&gt;&gt; root.add_child(child1)\n        &gt;&gt;&gt; root.add_child(child2)\n        &gt;&gt;&gt; paths = root.forward_stack(attr=\"value\")\n        &gt;&gt;&gt; sorted(paths)\n        [['child1', 'root'], ['child2', 'root']]  # Order may vary\n    \"\"\"\n    all_paths = []\n    self._dfs(self, [], all_paths, **kwargs)\n    return all_paths\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.remove_child","title":"<code>remove_child(child)</code>","text":"<p>Remove a child node from the current node.</p> <p>This method removes the specified child node from the current node's children and clears the child's parent reference.</p> <p>Parameters:</p> Name Type Description Default <code>child</code> <code>TreeNode</code> <p>The child node to remove.</p> required <p>Returns:</p> Type Description <p>None</p> Example <p>root = TreeNode(\"root\") child = TreeNode(\"child\") root.add_child(child) root.remove_child(child) child.parent is None True</p> Source code in <code>ures/data_structure/tree.py</code> <pre><code>def remove_child(self, child: TreeNode):\n    \"\"\"\n    Remove a child node from the current node.\n\n    This method removes the specified child node from the current node's children and clears the\n    child's parent reference.\n\n    Args:\n        child (TreeNode): The child node to remove.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; root = TreeNode(\"root\")\n        &gt;&gt;&gt; child = TreeNode(\"child\")\n        &gt;&gt;&gt; root.add_child(child)\n        &gt;&gt;&gt; root.remove_child(child)\n        &gt;&gt;&gt; child.parent is None\n        True\n    \"\"\"\n    if child.id in self.children.keys():\n        self._children.pop(child.id)\n        child.set_parent(None)\n</code></pre>"},{"location":"apis/data_structure/tree/#ures.data_structure.tree.TreeNode.set_parent","title":"<code>set_parent(parent)</code>","text":"<p>Set the parent of the current node.</p> <p>If the node already has a parent, it will be removed from that parent's children before setting the new parent.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>Optional[TreeNode]</code> <p>The new parent node. If None, the node will have no parent.</p> required <p>Returns:</p> Type Description <p>None</p> Example <p>root = TreeNode(\"root\") child = TreeNode(\"child\") child.set_parent(root) child.parent is root True</p> Source code in <code>ures/data_structure/tree.py</code> <pre><code>def set_parent(self, parent: Optional[TreeNode]):\n    \"\"\"\n    Set the parent of the current node.\n\n    If the node already has a parent, it will be removed from that parent's children before setting\n    the new parent.\n\n    Args:\n        parent (Optional[TreeNode]): The new parent node. If None, the node will have no parent.\n\n    Returns:\n        None\n\n    Example:\n        &gt;&gt;&gt; root = TreeNode(\"root\")\n        &gt;&gt;&gt; child = TreeNode(\"child\")\n        &gt;&gt;&gt; child.set_parent(root)\n        &gt;&gt;&gt; child.parent is root\n        True\n    \"\"\"\n    if parent is not None:\n        if isinstance(self.parent, TreeNode):\n            self.parent.remove_child(self)\n    self._parent = parent\n</code></pre>"}]}