name: CodeQuality

on: [push, pull_request]

jobs:
  secretCheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Secret Scanning
        uses: trufflesecurity/trufflehog@main
        with:
          extra_args: --results=verified,unknown

  superLint:
    name: Liters
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      # To report GitHub Actions status checks
      statuses: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # super-linter needs the full git history to get the
          # list of files that changed across commits
          fetch-depth: 0

      - name: Configure 1Password Service Account
        uses: 1password/load-secrets-action/configure@v2
        with:
          # Persist the 1Password Service Account Authorization token
          # for next steps.
          # Keep in mind that every single step in the job is now
          # able to access the token.
          service-account-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Load Docker credentials
        id: load-docker-credentials
        uses: 1password/load-secrets-action@v2
        with:
          export-env: false
        env:
          GITHUB_TOKEN: "op://DevOps/Git PAT - StoneHome - Action/credential"

      - name: Super-linter
        uses: super-linter/super-linter/slim@v7.2.1 # x-release-please-version
        env:
          # To report GitHub Actions status checks
          GITHUB_TOKEN: ${{ steps.load-docker-credentials.outputs.GITHUB_TOKEN }}
          VALIDATE_YAML: true
          VALIDATE_PYTHON_BLACK: true
          VALIDATE_JUPYTER_NBQA_BLACK: true
          VALIDATE_JSON: true
          VALIDATE_JSON_PRETTIER: true
          VALIDATE_GITLEAKS: true
          VALIDATE_ENV: true
          VALIDATE_DOCKERFILE_HADOLINT: true
          VALIDATE_GIT_COMMITLINT: true
          VALIDATE_GIT_MERGE_CONFLICT_MARKERS: true

  ut:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [ 3.11, 3.12 ]  # Specify the Python versions you want to test against

    steps:
      # 1. Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2. Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # 3. Install Poetry
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "${HOME}/.local/bin" >> $GITHUB_PATH

      # 4. Cache Poetry dependencies
      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      # 5. Install dependencies using Poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      # 6. Run Pytest
      - name: Run tests with Pytest
        run: poetry run pytest
